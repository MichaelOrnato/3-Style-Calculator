/*******************************************************************************
 * Program Name:        3-Style Project 
 * Program Description: This program prints the 3-style commutator given two 
 *                      targets 
 * Program Author:      Michael Ornato
 * Program Date:        02/28/2021
 * Change #:        Change Date:        Programmer Name:        Description:    
 * --------         ------------        ----------------        ------------
*******************************************************************************/ 

package commutators;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;

/**
 *
 * @author maor4
 */
public class ThreeStyle extends javax.swing.JFrame {
    private String text1 = "JPerm's Blindsolving Site";
    private String text2 = "SpeedCubeReview's Blindsolving Site";
    private String text3 = "Speffz Lettering Scheme";
    /**
     * Creates new form ThreeStyle
     */
    public ThreeStyle() throws HeadlessException { 
        initComponents(); 
        jTabbedPane1.setFont(new Font("Courier", Font.BOLD, 20));
        txtWelcome.setEditable(false); 
        
        lblJPerm.setForeground(Color.BLUE.darker()); 
        lblSCR.setForeground(Color.BLUE.darker());
        lblSpeffz.setForeground(Color.BLUE.darker());
        
        lblJPerm.setCursor(new Cursor(Cursor.HAND_CURSOR)); 
        lblSCR.setCursor(new Cursor(Cursor.HAND_CURSOR));
        lblSpeffz.setCursor(new Cursor(Cursor.HAND_CURSOR));
 
        lblJPerm.addMouseListener(new MouseAdapter() {
 
            @Override
            public void mouseClicked(MouseEvent e) {
                try {
                    Desktop.getDesktop().browse(new URI("http://jperm.net/bld"));
                } catch (IOException | URISyntaxException e1) {
                    e1.printStackTrace();
                }
            }
 
            @Override
            public void mouseExited(MouseEvent e) {
                lblJPerm.setText(text1);
            }
 
            @Override
            public void mouseEntered(MouseEvent e) {
                lblJPerm.setText("<html><a href=''>" + text1 + "</a></html>");
            }
 
        }); 
        
        lblSCR.addMouseListener(new MouseAdapter() {
 
            @Override
            public void mouseClicked(MouseEvent e) {
                try {
                    Desktop.getDesktop().browse(new URI("https://www.speedcubereview.com/blind-solving-algorithms.html"));
                } catch (IOException | URISyntaxException e1) {
                    e1.printStackTrace();
                }
            }
 
            @Override
            public void mouseExited(MouseEvent e) {
                lblSCR.setText(text2);
            }
 
            @Override
            public void mouseEntered(MouseEvent e) {
                lblSCR.setText("<html><a href=''>" + text2 + "</a></html>");
            }
 
        }); 
        
        lblSpeffz.addMouseListener(new MouseAdapter() {
 
            @Override
            public void mouseClicked(MouseEvent e) {
                try {
                    Desktop.getDesktop().browse(new URI("https://www.quora.com/What-is-LETTER-SCHEME-in-Rubiks-Cube-Blindfolded"));
                } catch (IOException | URISyntaxException e1) {
                    e1.printStackTrace(); 
                }
            }
 
            @Override
            public void mouseExited(MouseEvent e) {
                lblSpeffz.setText(text3);
            }
 
            @Override
            public void mouseEntered(MouseEvent e) {
                lblSpeffz.setText("<html><a href=''>" + text3 + "</a></html>");
            }
 
        }); 
    } 
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtWelcome = new javax.swing.JTextArea();
        pnlEdges = new javax.swing.JPanel();
        lblTarget = new javax.swing.JLabel();
        txtTarget1 = new javax.swing.JTextField();
        lblTarget2 = new javax.swing.JLabel();
        txtTarget2 = new javax.swing.JTextField();
        btnCycle = new javax.swing.JButton();
        txtESolution = new javax.swing.JScrollPane();
        txtSolution = new javax.swing.JTextArea();
        pnlCorners = new javax.swing.JPanel();
        lblTargetC2 = new javax.swing.JLabel();
        lblTargetC1 = new javax.swing.JLabel();
        txtTarget3 = new javax.swing.JTextField();
        txtTarget4 = new javax.swing.JTextField();
        btnCycleC = new javax.swing.JButton();
        txtESolution1 = new javax.swing.JScrollPane();
        txtSolC = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        lblJPerm = new javax.swing.JLabel();
        lblSCR = new javax.swing.JLabel();
        lblSpeffz = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtWelcome.setColumns(20);
        txtWelcome.setFont(new java.awt.Font("Monospaced", 0, 21)); // NOI18N
        txtWelcome.setRows(5);
        txtWelcome.setText("Welcome to the 3-Style Commutator \nCalculator! This app is to help \nspeedcubers learn the 3-Style blindfolded\ntechnique. \n\nThis technique uses commutators in order \nto solve two pieces at once. \n\nI only recommend this app to speedcubers \nwho are very serious about blindsolving. \n3-Style is the most advanced method for \nsolving the Rubik's Cube blindfolded. \n\nThe best speedcubers in the world can \nmemorize and solve a cube blindfolded in \nunder 30 seconds using this method. \n\nWhat you must know before starting: \n- How commutators work \n- Speffz Lettering Scheme.");
        jScrollPane1.setViewportView(txtWelcome);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 708, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Welcome", jPanel1);

        lblTarget.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblTarget.setText("Enter First Target:");

        txtTarget1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        txtTarget1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTarget1ActionPerformed(evt);
            }
        });

        lblTarget2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblTarget2.setText("Enter Second Target:");

        txtTarget2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        btnCycle.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btnCycle.setText("Generate Cycle");
        btnCycle.setToolTipText("");
        btnCycle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCycleActionPerformed(evt);
            }
        });

        txtSolution.setColumns(20);
        txtSolution.setRows(5);
        txtESolution.setViewportView(txtSolution);

        javax.swing.GroupLayout pnlEdgesLayout = new javax.swing.GroupLayout(pnlEdges);
        pnlEdges.setLayout(pnlEdgesLayout);
        pnlEdgesLayout.setHorizontalGroup(
            pnlEdgesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEdgesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEdgesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEdgesLayout.createSequentialGroup()
                        .addGroup(pnlEdgesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblTarget2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblTarget, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlEdgesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTarget1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTarget2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(129, 129, 129))
                    .addGroup(pnlEdgesLayout.createSequentialGroup()
                        .addGroup(pnlEdgesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtESolution)
                            .addComponent(btnCycle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        pnlEdgesLayout.setVerticalGroup(
            pnlEdgesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEdgesLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(pnlEdgesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTarget1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTarget, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlEdgesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTarget2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTarget2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCycle, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtESolution, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                .addGap(49, 49, 49))
        );

        jTabbedPane1.addTab("3-Style Edges", pnlEdges);

        lblTargetC2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblTargetC2.setText("Enter Second Target:");

        lblTargetC1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblTargetC1.setText("Enter First Target:");

        txtTarget3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        txtTarget3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTarget3ActionPerformed(evt);
            }
        });

        txtTarget4.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        txtTarget4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTarget4ActionPerformed(evt);
            }
        });

        btnCycleC.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btnCycleC.setText("Generate Cycle");
        btnCycleC.setToolTipText("");
        btnCycleC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCycleCActionPerformed(evt);
            }
        });

        txtSolC.setColumns(20);
        txtSolC.setRows(5);
        txtESolution1.setViewportView(txtSolC);

        javax.swing.GroupLayout pnlCornersLayout = new javax.swing.GroupLayout(pnlCorners);
        pnlCorners.setLayout(pnlCornersLayout);
        pnlCornersLayout.setHorizontalGroup(
            pnlCornersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCornersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCornersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCornersLayout.createSequentialGroup()
                        .addGroup(pnlCornersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCornersLayout.createSequentialGroup()
                                .addComponent(lblTargetC2, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtTarget3, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlCornersLayout.createSequentialGroup()
                                .addComponent(lblTargetC1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTarget4, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(142, 142, 142))
                    .addGroup(pnlCornersLayout.createSequentialGroup()
                        .addComponent(btnCycleC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCornersLayout.createSequentialGroup()
                        .addComponent(txtESolution1)
                        .addContainerGap())))
        );
        pnlCornersLayout.setVerticalGroup(
            pnlCornersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCornersLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(pnlCornersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTargetC1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTarget4, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlCornersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTargetC2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTarget3, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnCycleC, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtESolution1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                .addGap(50, 50, 50))
        );

        jTabbedPane1.addTab("3-Style Corners", pnlCorners);

        lblJPerm.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblJPerm.setText("JPerm's Blindsolving Page");

        lblSCR.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblSCR.setText("SpeedCubeReview's Blindsolving Page");

        lblSpeffz.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblSpeffz.setText("Speffz Lettering Scheme");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblJPerm)
                    .addComponent(lblSCR)
                    .addComponent(lblSpeffz))
                .addContainerGap(179, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(lblJPerm)
                .addGap(67, 67, 67)
                .addComponent(lblSCR)
                .addGap(61, 61, 61)
                .addComponent(lblSpeffz)
                .addContainerGap(457, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Resources", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 759, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void btnCycleCActionPerformed(java.awt.event.ActionEvent evt) {                                          
        String target1 = txtTarget4.getText();
        String target2 = txtTarget3.getText();

        target1 = target1.toUpperCase();
        target2 = target2.toUpperCase();

        switch (target1) {
            case "A":
                txtSolC.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolC.setText("");
                txtSolC.append("\nFirst Target: ULB");
                switch (target2) {
                    case "A":
                        txtSolC.append("\nSecond Target: UBL");
                        txtSolC.append("\n\nThis cycle cannot be done.");
                        break; 
                    case "B":
                        txtSolC.append("\nSecond Target: URB");
                        txtSolC.append("\nThis cycle is U-Any/U-Any");
                        txtSolC.append("\n\nCycle: [R' B' R : [R D R', U']]");
                        txtSolC.append("\nFull Solution: R' B' R R D R' U' R D' R' U");
                        break;
                    case "D":
                        txtSolC.append("\nSecond Target: UFL");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R' D R U2 : [R' D' R, U]]");
                        txtSolC.append("\nFull Solution: R' D R U2 R' D' R U R' D R U' U2' R' D' R");
                        break;
                    case "E":
                        txtSolC.append("\nSecond Target: LUB");
                        txtSolC.append("\n\nThis cycle cannot be done.");
                        break;
                    case "F":
                        txtSolC.append("\nSecond Target: LUF");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [F : [U2, F' R F R']]");
                        txtSolC.append("\nFull Solution: F U2 F' R F R' U2' R F' R' F F'");
                        break;
                    case "G":
                        txtSolC.append("\nSecond Target: LDF");
                        txtSolC.append("\nThis cycle is U-Top/D-Side");
                        txtSolC.append("\n\nCycle: [R' D R, U2]");
                        txtSolC.append("\nFull Solution: R' D R U2 R' D' R U2");
                        break;
                    case "H":
                        txtSolC.append("\nSecond Target: LDB");
                        txtSolC.append("\nThis cycle is U-Top/D-Side.");
                        txtSolC.append("\n\nCycle: [D : [R D' R', U2]]");
                        txtSolC.append("Full Solution: D R D' R' U2 R D R' U2' D'");
                        break;
                    case "I":
                        txtSolC.append("\nSecond Target: FUL");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [r D' U : [R D R', U2]]");
                        txtSolC.append("\nFull Solution: r D' U R D R' U2 R D' R' U2' U' D r'");
                        break;
                    case "K":
                        txtSolC.append("\nSecond Target: FDR");
                        txtSolC.append("\nThis cycle is U-Top/D-Side.");
                        txtSolC.append("\n\nCycle: [D U' : [R D R', U2]]");
                        txtSolC.append("\nFull Solution: D U' R D R' U2 R D' R' U2' U D'");
                        break;
                    case "L":
                        txtSolC.append("\nSecond Target: FDL");
                        txtSolC.append("\nThis cycle is U-Top/D-Side");
                        txtSolC.append("\n\nCycle: [D : [R' D' R, U2]]");
                        txtSolC.append("\nFull Solution: D R' D' R U2 R' D R U2' D'");
                        break;
                    case "N":
                        txtSolC.append("\nSecond Target: RUB");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R' U D R2 : [U', R' D' R]]");
                        txtSolC.append("\nFull Solution: R' U D R2 U' R' D' R U R' D R R2' D' U' R");
                        break;
                    case "O":
                        txtSolC.append("\nSecond Target: RDB");
                        txtSolC.append("\nThis cycle is U-Top/D-Side.");
                        txtSolC.append("\n\nCycle: [U' : [R D R', U2]]");
                        txtSolC.append("\nFull Solution: U' R D R' U2 R D' R' U2' U");
                        break;
                    case "P":
                        txtSolC.append("\nSecond Target: RDF");
                        txtSolC.append("\nThis cycle is U-Top/D-Side.");
                        txtSolC.append("\n\nCycle: [R' D' R, U2]");
                        txtSolC.append("\nFull Solution: R' D' R U2 R' D R U2'");
                        break;
                    case "Q":
                        txtSolC.append("\nSecond Target: BUR");
                        txtSolC.append("\nThis cycle is U-Any/U-Any");
                        txtSolC.append("\nCycle: [R' U D : [R D R', U2]]");
                        txtSolC.append("\nFull Solution: R' U D R D R' U2 R D' R' U2' D' U' R");
                        break;
                    case "R":
                        txtSolC.append("\nSecond Target: BUL");
                        txtSolC.append("\n\nThis cycle cannot be done.");
                        break;
                    case "S":
                        txtSolC.append("\nSecond Target: BDL");
                        txtSolC.append("\nThis cycle is U-Top/D-Side");
                        txtSolC.append("\n\nCycle: [D' U' : [R D R', U2]]");
                        txtSolC.append("\nFull Solution: D' U' R D R' U2 R D' R' U2' U D");
                        break;
                    case "T":
                        txtSolC.append("\nSecond Target: BDR");
                        txtSolC.append("\nThis cycle is a U-Top/D-Side.");
                        txtSolC.append("\n\nCycle: [D U' : [R D' R', U2]]");
                        txtSolC.append("\nFull Solution: D U' R D' R' U2 R D R' U2' U D'");
                        break;
                    case "U":
                        txtSolC.append("\nSecond Target: DFL");
                        txtSolC.append("\nThis cycle is U-Top/D-Bottom");
                        txtSolC.append("\n\nCycle: [R F' R' U' : [R D R', U2]]");
                        txtSolC.append("Full Solution: R F' R' U' R D R' U2 R D' R' U2' U R F R'");
                        break;
                    case "V":
                        txtSolC.append("\nSecond Target: DFR");
                        txtSolC.append("\nThis cycle is Special");
                        txtSolC.append("\n\nCycle: [R' D R U' R D' R', U2]");
                        txtSolC.append("\nFull Solution: R' D R U' R D' R' U2 R D R' U R' D' R");
                        break;
                    case "W":
                        txtSolC.append("\nSecond Target: DBR");
                        txtSolC.append("\nThis cycle is U-Top/D-Bottom");
                        txtSolC.append("\n\nCycle: [R D' R' : [R' D R, U2]]");
                        txtSolC.append("Full Solution: R D' R' R' D R U2 R' D' R U2' R D R'");
                        break;
                    case "X":
                        txtSolC.append("\nSecond Target: DBL");
                        txtSolC.append("\nThis cycle is Special");
                        txtSolC.append("\n\nCycle: [R' U' D' R : [R U' R', D]]");
                        txtSolC.append("\nFull Solution: R' U' D' R R U' R' D R U R' D' R' D U R");
                        break;
                    default:
                        txtSolC.append("\nError. Second Target Entered is Buffer Piece.");
                        break;
                }
                break;

            case "B":
                txtSolC.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolC.setText("");
                txtSolC.setText("\nFirst Target: UBR");
                switch (target2) {
                    case "A":
                        txtSolC.append("\nSecond Target: UBL");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R' B' R : [U', R D R']]");
                        txtSolC.append("\nFull Solution: R' B' R U' R D R' U R D' R' R' B R");
                        break;
                    case "B":
                        txtSolC.append("\nSecond Target: UBR");
                        txtSolC.append("\n\nThis cycle cannot be done.");
                        break;
                    case "D":
                        txtSolC.append("\nSecond Target: UFL");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R F' R' : [R' D R, U]]");
                        txtSolC.append("\nFull Solution: R F' R' R' D R U R' D' R U' R F R'");
                        break;
                    case "E":
                        txtSolC.append("\nSecond Target: LUB");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R : [U, R D R']]");
                        txtSolC.append("\nFull Solution: R U R D R' U' R D' R' R'");
                        break;
                    case "F":
                        txtSolC.append("\nSecond Target: LUF");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R2 : [D', R U' R']]");
                        txtSolC.append("\nFull Solution: R2 D' R U' R' D R U R' R2'");
                        break;
                    case "G":
                        txtSolC.append("\nSecond Target: LDF");
                        txtSolC.append("\nThis cycle is U-Any/D-Side");
                        txtSolC.append("\n\nCycle: [R' D R, U]");
                        txtSolC.append("\nFull Solution: R' D R U R' D' R U'");
                        break;
                    case "H":
                        txtSolC.append("\nSecond Target: LDB");
                        txtSolC.append("\nThis cycle is U-Any/D-Side.");
                        txtSolC.append("\n\nCycle: [U', R D' R']");
                        txtSolC.append("\nFull Solution: U' R D' R' U R D R'");
                        break;
                    case "I":
                        txtSolC.append("\nSecond Target: FUL");
                        txtSolC.append("\nThis cycle is U-Any/U-Any");
                        txtSolC.append("\n\nCycle: [R2 U' : [D', R U R']]");
                        txtSolC.append("\nFull Solution: R2 U' D' R U R' D R U' R' U R2'");
                    case "K":
                        txtSolC.append("\nSecond Target: FDR");
                        txtSolC.append("\nThis cycle is U-Top/D-Side.");
                        txtSolC.append("\n\nCycle: [D' : [R' D R, U]]");
                        txtSolC.append("\nFull Solution: D' R' D R U R' D' R U' D");
                        break;
                    case "L":
                        txtSolC.append("\nSecond Target: FDL");
                        txtSolC.append("\nThis cycle is U-Top/D-Side.");
                        txtSolC.append("\n\nCycle: [D : [R' D' R, U]]");
                        txtSolC.append("\nFull Solution: D R' D' R U R' D R U' D'");
                        break;
                    case "N":
                        txtSolC.append("\nSecond Target: RUB");
                        txtSolC.append("\n\nThis cycle is cannot be done.");
                        break;
                    case "O":
                        txtSolC.append("\nSecond Target: RDB");
                        txtSolC.append("\nThis cycle is U-Top/Di-Side.");
                        txtSolC.append("\n\nCycle: [U', R D R']");
                        txtSolC.append("\nFull Solution: U' R D R' U R D' R' U");
                        break;
                    case "P":
                        txtSolC.append("\nSecond Target: RDF");
                        txtSolC.append("\nThis cycle is U-Top/Di-Side.");
                        txtSolC.append("\n\nCycle: [R' D' R, U]");
                        txtSolC.append("\nFull Solution: R' D' R U R' D R U'");
                        break;
                    case "Q":
                        txtSolC.append("\nSecond Target: BUR");
                        txtSolC.append("\n\nThis cycle cannot be done.");
                        break;
                    case "R":
                        txtSolC.append("\nSecond Target: BUL");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R2 U : [R' U' R, D]]");
                        txtSolC.append("\nFull Solution: R2 U R' U' R D R' U R D' U' R2'");
                        break;
                    case "S":
                        txtSolC.append("\nSecond Target: BDL");
                        txtSolC.append("\nThis cycle is U-Top/D-Side.");
                        txtSolC.append("\n\nCycle: [D' : [U', R D R']]");
                        txtSolC.append("\nFull Solution: D' U' R D R' U R D' R' D");
                        break;
                    case "T":
                        txtSolC.append("\nSecond Target: BDR");
                        txtSolC.append("\nThis cycle is U-Top/D-Side.");
                        txtSolC.append("\n\nCycle: [D : [U', R D' R']]");
                        txtSolC.append("\nFull Solution: D U' R D' R' U R D R' D'");
                        break;
                    case "U":
                        txtSolC.append("\nSecond Target: DFL");
                        txtSolC.append("\nThis cycle is U-Top/D-Bottom.");
                        txtSolC.append("\n\nCycle: [R F' : [R' U' R, D]]");
                        txtSolC.append("\nFull Solution: R F' R' U' R D R' U R D' F R'");
                        break;
                    case "V":
                        txtSolC.append("\nSecond Target: DFR");
                        txtSolC.append("\nThis cycle is Special.");
                        txtSolC.append("\n\nCycle: [R' D R U' R D' R', U]");
                        txtSolC.append("\nFull Solution: R' D R U' R D' R' U R D R' U R' D' R");
                        break;
                    case "W":
                        txtSolC.append("\nSecond Target: DBL");
                        txtSolC.append("\nThis cycle is Special.");
                        txtSolC.append("\n\nCycle: [U', R D' R' U R' D R]");
                        txtSolC.append("\nFull Solution: U' R D' R' U R' D R U R' D' R U' R D R'");
                        break;
                    case "X":
                        txtSolC.append("\nSecond Target: DBL");
                        txtSolC.append("\nThis cycle is U-Top/D-Bottom.");
                        txtSolC.append("\n\nCycle: [R' B : [D', R U R']]");
                        txtSolC.append("\nFull Solution: R' B D' R U R' D R U' R' B' R");
                        break;
                    default:
                        txtSolC.append("\nError. Second Target Entered is Buffer Piece.");
                        break;
                }
                break;

            case "D":
                txtSolC.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolC.setText("");
                txtSolC.append("\nFirst Target: UFL");
                switch (target2) {
                    case "A":
                        txtSolC.append("\nSecond Target: UBL");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R' D R U' : [R' D' R, U']]");
                        txtSolC.append("\nFull Solution: R' D R U' R' D' R U' R' D R U U R' D' R");
                        break;
                    case "B":
                        txtSolC.append("\nSecond Target: UBR");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R F' R' : [U, R' D R]]");
                        txtSolC.append("\nFull Solution: R F' R' U R' D R U' R' D' R R F R'");
                        break;
                    case "D":
                        txtSolC.append("\nSecond Target: UFL");
                        txtSolC.append("\n\nThis cycle cannot be done.");
                        break;
                    case "E":
                        txtSolC.append("\nSecond Target: LUB");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [U' R2 : [D, R' U2 R]]");
                        txtSolC.append("\nFull Solution: U' R2 D R' U2 R D' R' U2' R R2' U");
                        break;
                    case "F":
                        txtSolC.append("\nSecond Target: LUF");
                        txtSolC.append("\n\nThis cycle cannot be done.");
                        break;
                    case "G":
                        txtSolC.append("\nSecond Target: LDF");
                        txtSolC.append("\nThis cycle is U-Any/D-Side");
                        txtSolC.append("\n\nCycle: [R' D R, U']");
                        txtSolC.append("\nFull Solution: R' D R U' R' D' R U");
                        break;
                    case "H":
                        txtSolC.append("\nSecond Target: LDB");
                        txtSolC.append("\nThis cycle is U-Any/D-Side.");
                        txtSolC.append("\n\nCycle: [U' : [R D' R', U']]");
                        txtSolC.append("\n\nFull Solution: U' R D' R' U' R D R' U U");
                        break;
                    case "I":
                        txtSolC.append("\nSecond Target: FUL");
                        txtSolC.append("\n\nThis cycle cannot be done.");
                        break;
                    case "K":
                        txtSolC.append("\nSecond Target: FDR");
                        txtSolC.append("\nThis cycle is U-Any/D-Side.");
                        txtSolC.append("\n\nCycle: [D' : [R' D R, U']]");
                        txtSolC.append("\nFull Solution: D' R' D R U' R' D' R U D");
                        break;
                    case "L":
                        txtSolC.append("\nSecond Target: FDL");
                        txtSolC.append("\nThis cycle is U-Any/D-Side.");
                        txtSolC.append("\n\nCycle: [D : [R' D' R, U']]");
                        txtSolC.append("\nFull Solution: D R' D' R U' R' D R U D'");
                        break;
                    case "N":
                        txtSolC.append("\nSecond Target: RUB");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [U' R' : [U2, R' D' R]]");
                        txtSolC.append("\nFull Solution: U' R' U2 R' D' R U2' R' D R R U");
                        break;
                    case "O":
                        txtSolC.append("\nSecond Target: RDB");
                        txtSolC.append("\nThis cycle is U-Any/D-Side");
                        txtSolC.append("\n\nCycle: [U' : [R D R', U']]");
                        txtSolC.append("\nFull Solution: U' R D R' U' R D' R' U U");
                        break;
                    case "P":
                        txtSolC.append("\nSecond Target: RDF");
                        txtSolC.append("\nThis cycle is U-Any/D-Side");
                        txtSolC.append("\n\nCycle: [R' D' R, U']");
                        txtSolC.append("\nFull Solution: R' D' R U' R' D R U");
                        break;
                    case "Q":
                        txtSolC.append("\nSecond Target: BUR");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R' D' : [U', R' D R]]");
                        txtSolC.append("\nFull Solution: R' D' U' R' D R U R' D' R D R");
                        break;
                    case "R":
                        txtSolC.append("\nSecond Target: BUL");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [U' R' : [U', R' D' R]]");
                        txtSolC.append("\nFull Solution: U' R' U' R' D' R U R' D R R U");
                        break;
                    case "S":
                        txtSolC.append("\nSecond Target: BDL");
                        txtSolC.append("\nThis cycle is U-Any/D-Side.");
                        txtSolC.append("\n\nCycle: [D : [R' D R, U']]");
                        txtSolC.append("\nFull Solution:: D R' D R U' R' D' R U D'");
                        break;
                    case "T":
                        txtSolC.append("\nSecond Target: BDR");
                        txtSolC.append("\nThis cycle is ");
                        txtSolC.append("\n\nCycle: [D' : [R' D' R, U']]");
                        txtSolC.append("\nFull Solution: D' R' D' R U' R' D R U D");
                        break;
                    case "U":
                        txtSolC.append("\nSecond Target: DFL");
                        txtSolC.append("\nThis cycle is Special.");
                        txtSolC.append("\n\nCycle: R' U' R : [F2', R' U R U']");
                        txtSolC.append("\nFull Solution: R' U' R F2' R' U R U' F2 U R' U' R R' U R");
                        break;
                    case "V":
                        txtSolC.append("\nSecond Target: DFR");
                        txtSolC.append("\nThis cycle is Special.");
                        txtSolC.append("\n\nCycle: [R' D R U' R D' R', U']");
                        txtSolC.append("\nFull Solution: R' D R U' R D' R' U' R D R' U R' D' R");
                        break;
                    case "W":
                        txtSolC.append("\nSecond Target: DNR");
                        txtSolC.append("\nThis cycle is U-Top/D-Bottom");
                        txtSolC.append("\n\nCycle: [R D' R' : [R' D R, U']]");
                        txtSolC.append("\nFull Solution: R D' R' R' D R U' R' D' R U R D R'");
                        break;
                    case "X":
                        txtSolC.append("\nSecond Target: DBL");
                        txtSolC.append("\nThis cycle is Special.");
                        txtSolC.append("\n\nCycle: [R' D' R : [R U' R', D]]");
                        txtSolC.append("\nFull Solution: R' D' R R U' R' D R U R' D' R' D R");
                        break;
                    default:
                        txtSolC.append("\nError. Second Target Entered is Buffer Piece.");
                        break;
                }
                break;
            case "E":
                txtSolC.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolC.setText("");
                txtSolC.append("\nFirst Target: LUB");
                switch (target2) {
                    case "A":
                        txtSolC.append("\nSecond Target: UBL");
                        txtSolC.append("\n\nThis cycle cannot be done.");
                        break;
                    case "B":
                        txtSolC.append("\nSecond Target: UBR");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R2 : [D, R' U R]]");
                        txtSolC.append("\nFull Solution: R2 D R' U R D' R' U' R R2'");
                        break;
                    case "D":
                        txtSolC.append("\nSecond Target: UFL");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [U' R : [U2, R D R']]");
                        txtSolC.append("\nFull Solution: U' R U2 R D R' U2' R D' R' R' U");
                        break;
                    case "E":
                        txtSolC.append("\nSecond Target: LUB");
                        txtSolC.append("\n\nThis cycle cannnot be done.");
                        break;
                    case "F":
                        txtSolC.append("\nSecond Target: LUF");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [U' R' F : [D, R U R']]");
                        txtSolC.append("\nFull Solution: U' R' F D R U R' D' R U' R' D' F' R U");
                        break;
                    case "G":
                        txtSolC.append("\nSecond Target: LDF");
                        txtSolC.append("\nThis cycle is U-Side/D-Any");
                        txtSolC.append("\n\nCycle: [U R' : [U', R' D R]]");
                        txtSolC.append("\nFull Solution: U R' U' R' D R U R' D' R R U'");
                        break;
                    case "H":
                        txtSolC.append("\nSecond Target: LDB");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [R D' : [R D R', U]]");
                        txtSolC.append("\nFull Solution: R D' R D R' U R D' R' U' D R'");
                        break;
                    case "I":
                        txtSolC.append("\nSecond Target: FUL");
                        txtSolC.append("\nThis cycle is U-Any/U-Any");
                        txtSolC.append("\n\nCycle: [l' U : [R D' R', U2]]");
                        txtSolC.append("\nFull Solution: l' U R D' R' U2 R D R' U2' U' l");
                        break;
                    case "K":
                        txtSolC.append("\nSecond Target: FDR");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [U D' R' : [U', R' D R]]");
                        txtSolC.append("\nFull Solution: U D' R' U' R' D R U R' D' R R D U'");
                        break;
                    case "L":
                        txtSolC.append("\nSecond Target: FDL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [R U : [R' D R, U]]");
                        txtSolC.append("\nFull Solution: R U R' D R U R' D' R U' U' R'");
                        break;
                    case "N":
                        txtSolC.append("\nSecond Target: RUB");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R' D R2 D' R2' : [U, R2 D R2' D' R2]]");
                        txtSolC.append("\nFull Solution: R' D R2 D' R2' U R2 D R2' D' R2 U' R2' D R2 D' R2' R2 D R2' D' R");
                        break;
                    case "O":
                        txtSolC.append("\nSecond Target: RDB");
                        txtSolC.append("\nThis cycle is U-Side/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [U' R : [R U' R', D']]");
                        txtSolC.append("\nFull Solution: U' R R U' R' D' R U R' D R' U");
                        break;
                    case "P":
                        txtSolC.append("\nSecond Target: RDF");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [U R' U2 : [R D R', U]]");
                        txtSolC.append("\nFull Solution: U R' U2 R D R' U R D' R' U' U2' R U'");
                        break;
                    case "Q":
                        txtSolC.append("\nSecond Target: BUR");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R', F' L F]");
                        txtSolC.append("\nFull Solution: R' F' L F R F' L' F");
                        break;
                    case "R":
                        txtSolC.append("\nSecond Target: BUL");
                        txtSolC.append("\n\nThis cycle cannot be done.");
                        break;
                    case "S":
                        txtSolC.append("\nSecond Target: BDL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [U D R' : [U', R' D R]]");
                        txtSolC.append("\nFull Solution: U D' R' U' R' D R U R' D' R R D' U'");
                        break;
                    case "T":
                        txtSolC.append("\nSecond Target: BDR");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [R U : [R' D' R, U]]");
                        txtSolC.append("R U R' D' R U R' D R U' U' R'");
                        break;
                    case "U":
                        txtSolC.append("\nSecond Target: DFL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [D' R : [R D' R', U]]");
                        txtSolC.append("\nFull Solution: D' R R D' R' U R D R' U' R' D");
                        break;
                    case "V":
                        txtSolC.append("\nSecond Target: DFR");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [U R' D' : [U', R' D' R]]");
                        txtSolC.append("\nFull Solution: U R' D' U' R' D' R U R' D R D R U'");
                        break;
                    case "W":
                        txtSolC.append("\nSecond Target: DBR");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [D R : [R D' R', U]]");
                        txtSolC.append("\nFull Solution: D R R D' R' U R D R' U' R' D'");
                        break;
                    case "X":
                        txtSolC.append("\nSecond Target: DBL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [R : [R D' R', U]]");
                        txtSolC.append("\nFull Solution: R R D' R' U R D R' U' R'");
                        break;
                    default:
                        txtSolC.append("\nError. Second Target Entered is Buffer Piece.");
                        break;
                }
                break;
            case "F":
                txtSolC.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolC.setText("");
                txtSolC.setText("\nFirst Target: LUF");
                switch (target2) {
                    case "A":
                        txtSolC.append("\nSecond Target: UBL");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [F : [R' D' R, U2]]");
                        txtSolC.append("\nFull Solution: F R' D' R U2 R' D R U2' F'");
                        break;
                    case "B":
                        txtSolC.append("\nSecond Target: UBR");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R' : [U', R' D' R]]");
                        txtSolC.append("\nFull Solution: R' U' R' D' R U R' D R R");
                        break;
                    case "D":
                        txtSolC.append("\nSecond Target: UFL");
                        txtSolC.append("\n\nThis cycle cannot be done.");
                        break;
                    case "E":
                        txtSolC.append("\nSecond Target: LUB");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [U' R' U, L]");
                        txtSolC.append("\nFull Solution: U' R' U L U' R U L'");
                        break;
                    case "F":
                        txtSolC.append("\nSecond Target: LUF");
                        txtSolC.append("\n\nThis cycle cannot be done.");
                        break;
                    case "G":
                        txtSolC.append("\nSecond Target: LDF");
                        txtSolC.append("\nThis cycle is LUF/D-Any.");
                        txtSolC.append("\n\nCycle: [R' U' : [D, R U R']]");
                        txtSolC.append("\nFull Solution: R' U' D R U R' D' R U' R' U R");
                        break;
                    case "H":
                        txtSolC.append("\nSecond Target: LDB");
                        txtSolC.append("\nThis cycle is LUF/D-Any.");
                        txtSolC.append("\n\nCycle: [U' R U' : [D', R' U R]]");
                        txtSolC.append("\nFull Solution: U' R U' D' R' U R D R' U' R U R' U");
                        break;
                    case "I":
                        txtSolC.append("\nSecond Target: FUL");
                        txtSolC.append("\n\nThis cycle cannnot be done.");
                        break;
                    case "K":
                        txtSolC.append("\nSecond Target: FDR");
                        txtSolC.append("\nThis cycle is Special.");
                        txtSolC.append("\n\nCycle: [R : [F, R' U R U']]");
                        txtSolC.append("\nFull Solution: R F R' U R U' F' U R' U' R R'");
                        break;
                    case "L":
                        txtSolC.append("\nSecond Target: FDL");
                        txtSolC.append("\nThis cycle is LUF/D-Any.");
                        txtSolC.append("\n\nCycle: [D R' U' : [D', R U R']]");
                        txtSolC.append("\nFull Solution: D R' U' D' R U R' D R U' R' U R D'");
                        break;
                    case "N":
                        txtSolC.append("\nSecond Target: RUB");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R U' D' R' : [D, R' U R]]");
                        txtSolC.append("\nFull Solution: R U' D' R' D R' U R D' R' U' R R D U R");
                        break;
                    case "O":
                        txtSolC.append("\nSecond Target: RDB");
                        txtSolC.append("\nThis cycle is Special.");
                        txtSolC.append("\n\nCycle: [D' R : [F, R' U R U']]");
                        txtSolC.append("\nFull Solution: D' R F R' U R U' F' U R' U' R R' D");
                        break;
                    case "P":
                        txtSolC.append("\nSecond Target: ");
                        txtSolC.append("\nThis cycle is LUF/D-Any.");
                        txtSolC.append("\n\nCycle: [R' U' : [D', R U R']]");
                        txtSolC.append("\nFull Solution: R' U' D' R U R' D R U' R' U R");
                        break;
                    case "Q":
                        txtSolC.append("\nSecond Target: BUR");
                        txtSolC.append("\nThis cycle is U-Any/D-Any.");
                        txtSolC.append("\n\nCycle: [R' F : [R U R', D]]");
                        txtSolC.append("\nFull Solution: R' F R U R' D R U' R' D' F' R");
                        break;
                    case "R":
                        txtSolC.append("\nSecond Target: BUL");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [l U' l', F]");
                        txtSolC.append("\nFull Solution: l U' l' F l U l' F'");
                        break;
                    case "S":
                        txtSolC.append("\nSecond Target: BDL");
                        txtSolC.append("\nThis cycle is Special");
                        txtSolC.append("\n\nCycle: [l U2 l', F]");
                        txtSolC.append("\nFull Solution: l U2 l' F l U2' l' F'");
                        break;
                    case "T":
                        txtSolC.append("\nSecond Target: BDR");
                        txtSolC.append("\nThis cycle is LUF/D-Any.");
                        txtSolC.append("\n\nCycle: [D' R' U' : [D', R U R']]");
                        txtSolC.append("\nFull Solution: D' R' U' D' R U R' D R U' R' U R D");
                        break;
                    case "U":
                        txtSolC.append("\nSecond Target: DFL");
                        txtSolC.append("\nThis cycle is LUF/D-Any.");
                        txtSolC.append("\n\nCycle: [U' R' U : [R U' R', D]]");
                        txtSolC.append("\nFull Solution: U' R' U R U' R' D R U R' D' U' R U");
                        break;
                    case "V":
                        txtSolC.append("\nSecond Target: DFR");
                        txtSolC.append("\nThis cycle is LUF/D-Any.");
                        txtSolC.append("\n\nCycle: [U' D' R' U : [R U' R', D]]");
                        txtSolC.append("\nFull Solution: U' D' R' U R U' R' D R U R' D' U' R D U");
                        break;
                    case "W":
                        txtSolC.append("\nSecond Target: DBR");
                        txtSolC.append("\nThis cycle is Special");
                        txtSolC.append("\n\nCycle: [R U' R' : [D, R' U R]]");
                        txtSolC.append("\nFull Solution: R U' R' D R' U R D' R' U' R R U R'");
                        break;
                    case "X":
                        txtSolC.append("\nSecond Target: DBL");
                        txtSolC.append("\nThis cycle is LUF/D-Any");
                        txtSolC.append("\n\nCycle: [U' D R' U : [R U' R', D]]");
                        txtSolC.append("\nFull Solution: U' D R' U R U' R' D R U R' D' U' R D' U");
                        break;
                    default:
                        txtSolC.append("\nError. Second Target Entered is Buffer Piece.");
                        break;
                }
                break;
            case "G":
                txtSolC.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolC.setText("");
                txtSolC.append("\nFirst Target: LDF");
                switch (target2) {
                    case "A":
                        txtSolC.append("\nSecond Target: UBL");
                        txtSolC.append("\nThiscycle is U-Top/D-Side.");
                        txtSolC.append("\n\nCycle: [U2, R' D R]");
                        txtSolC.append("\nFull Solution: U2 R' D R U2' R' D' R");
                        break;
                    case "B":
                        txtSolC.append("\nSecond Target: UBR");
                        txtSolC.append("\nThiscycle is U-Top/D-Side.");
                        txtSolC.append("\n\nCycle: [U, R' D R]");
                        txtSolC.append("\nFull Solution: U R' D R U' R' D' R");
                        break;
                    case "D":
                        txtSolC.append("\nSecond Target: UFL");
                        txtSolC.append("\nThiscycle is U-Top/D-Side.");
                        txtSolC.append("\n\nCycle: U', R' D R");
                        txtSolC.append("\nFull Solution: U' R' D R U R' D' R");
                        break;
                    case "E":
                        txtSolC.append("\nSecond Target: LUB");
                        txtSolC.append("\nThiscycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: U R' : [R' D R, U']");
                        txtSolC.append("\nFull Solution: U R' R' D R U' R' D' R U R U'");
                        break;
                    case "F":
                        txtSolC.append("\nSecond Target: LUF");
                        txtSolC.append("\nThiscycle is LUF/D-Any");
                        txtSolC.append("\n\nCycle: [R' U' : [R U R', D]]");
                        txtSolC.append("\nFull Solution: R' U' R U R' D R U' R' D' U R");
                        break;
                    case "G":
                        txtSolC.append("\nSecond Target: LDF");
                        txtSolC.append("\nThiscycle cannot be done. ");
                        break;
                    case "H":
                        txtSolC.append("\nSecond Target: LDB");
                        txtSolC.append("\nThiscycle is Special.");
                        txtSolC.append("\n\nCycle: [D R' : [F', R D' R']]");
                        txtSolC.append("\nFull Solution: D R' F' R D' R' F R D R' R D'");
                        break;
                    case "I":
                        txtSolC.append("\nSecond Target: FUL");
                        txtSolC.append("\nThiscycle is Special.");
                        txtSolC.append("\n\nCycle: [D R' : [F2, R D' R' D]]");
                        txtSolC.append("\nFull Solution: D R' F2 R D' R' D F2' D' R D R' R D'");
                        break;
                    case "K":
                        txtSolC.append("\nSecond Target: FDR");
                        txtSolC.append("\nThiscycle is D-Side/D-Side.");
                        txtSolC.append("\n\nCycle: [U : [D, R U' R']]");
                        txtSolC.append("\nFull Solution: U D R U' R' D' R U R' U'");
                        break;
                    case "L":
                        txtSolC.append("\nSecond Target: FDL");
                        txtSolC.append("\nThiscycle cannot be done.");
                        break;
                    case "N":
                        txtSolC.append("\nSecond Target: RUB");
                        txtSolC.append("\nThiscycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [U R U : [R' D R, U2]]");
                        txtSolC.append("\nFull Solution: U R U R' D R U2 R' D' R U2' U' R' U'");
                        break;
                    case "O":
                        txtSolC.append("\nSecond Target: RDB");
                        txtSolC.append("\nThiscycle is D-Side/D-Side.");
                        txtSolC.append("\n\nCycle: [U D : [R U' R', D2]]");
                        txtSolC.append("\nFull Solution: U D R U' R' D2 R U R' D2' D' U'");
                        break;
                    case "P":
                        txtSolC.append("\nSecond Target: RDF");
                        txtSolC.append("\nThiscycle is D-Side/D-Side.");
                        txtSolC.append("\n\nCycle: [U R' D : [R U' R', D2]]");
                        txtSolC.append("\nFull Solution: U R' D R U' R' D2 R U R' D2' D' R U'");
                        break;
                    case "Q":
                        txtSolC.append("\nSecond Target: BUR");
                        txtSolC.append("\nThiscycle is BUR/D-Any.");
                        txtSolC.append("\n\nCycle: [R' U : [R U' R', D]]");
                        txtSolC.append("\nFull Solution: R' U R U' R' D R U R' D'");
                        break;
                    case "R":
                        txtSolC.append("\nSecond Target: BUL");
                        txtSolC.append("\nThiscycle is U-Side/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [R B' R' : [R' D R, U]]");
                        txtSolC.append("\nFull Solution: R B' R' R' D R U R' D' R U' R B R'");
                        break;
                    case "S":
                        txtSolC.append("\nSecond Target: BDL");
                        txtSolC.append("\nThiscycle is D-Side/D-Side");
                        txtSolC.append("\n\nCycle: [U D : [R U' R', D]]");
                        txtSolC.append("\nFull Solution: U D R U' R' D R U R' D' D' U'");
                        break;
                    case "T":
                        txtSolC.append("\nSecond Target: BDR");
                        txtSolC.append("\nThiscycle is D-Side/D-Side - Special.");
                        txtSolC.append("\n\nCycle: [R' D R : [D', R U R']]");
                        txtSolC.append("\nFull Solution: R' D R D' R U R' D R U' R' R' D' R");
                        break;
                    case "U":
                        txtSolC.append("\nSecond Target: DFL");
                        txtSolC.append("\nThiscycle cannot be done.");
                        break;
                    case "V":
                        txtSolC.append("\nSecond Target: DFR");
                        txtSolC.append("\nThiscycle is D-Side/D-Bottom.");
                        txtSolC.append("\n\nCycle: [U D R D' : [U', R' D R]]");
                        txtSolC.append("\nFull Solution: U D R D' U' R' D R U R' D' R D R' D' U'");
                        break;
                    case "W":
                        txtSolC.append("\nSecond Target: DBR");
                        txtSolC.append("\nThiscycle is D-Side/D-Bottom.");
                        txtSolC.append("\n\nCycle: [U R : [D, R U' R']]");
                        txtSolC.append("\nFull Solution: U R D R U' R' D' R U R' R' U'");
                        break;
                    case "X":
                        txtSolC.append("\nSecond Target: DBL");
                        txtSolC.append("\nThiscycle is D-Side/D-Bottom - Special");
                        txtSolC.append("\n\nCycle: [D U R U' : [F2', U R' U' R]]");
                        txtSolC.append("\nFull Solution: D U R U' F2' U R' U' R F2 R' U R U' U R' U' D'");
                        break;
                    default:
                        txtSolC.append("\nError. Second Target Entered is Buffer Piece.");
                        break;
                }
                break;
            case "H":
                txtSolC.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolC.setText("");
                txtSolC.append("\nFirst Target: LDB");
                switch (target2) {
                    case "A":
                        txtSolC.append("\nSecond Target: UBL");
                        txtSolC.append("\nThiscycle is U-Top/D-Side");
                        txtSolC.append("\n\nCycle: [U : [R D' R', U2]]");
                        txtSolC.append("\nFull Solution: U R D' R' U2 R D R' U2' U'");
                        break;
                    case "B":
                        txtSolC.append("\nSecond Target: UBR");
                        txtSolC.append("\nThiscycle is U-Top/D-Side.");
                        txtSolC.append("\n\nCycle: [R D' R', U']");
                        txtSolC.append("\nFull Solution: R D' R' U' R D R' U");
                        break;
                    case "D":
                        txtSolC.append("\nSecond Target: UFL");
                        txtSolC.append("\nThiscycle is U-Top/D-Side");
                        txtSolC.append("\n\nCycle: [U2 : [R D' R', U]]");
                        txtSolC.append("\nFull Solution: U2 R D' R' U R D R' U' U2'");
                        break;
                    case "E":
                        txtSolC.append("\nSecond Target: LUB");
                        txtSolC.append("\nThiscycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [R D' : [U, R D R']]");
                        txtSolC.append("\nFull Solution: R D' U R D R' U' R D' R' D R'");
                        break;
                    case "F":
                        txtSolC.append("\nSecond Target: LUF");
                        txtSolC.append("\nThiscycle is LUF/D-Any.");
                        txtSolC.append("\n\nCycle: [U' R U' : [R' U R, D']]");
                        txtSolC.append("\nFull Solution: U' R U' R' U R D' R' U' R D U R' U");
                        break;
                    case "G":
                        txtSolC.append("\nSecond Target: LDF");
                        txtSolC.append("\nThiscycle is D-Side/D-Side - Special.");
                        txtSolC.append("\n\nCycle: [R' D : [F', D' R D R']]");
                        txtSolC.append("\nFull Solution: R' D F' D' R D R' F R D' R' D D' R");
                        break;
                    case "H":
                        txtSolC.append("\nSecond Target: LDB");
                        txtSolC.append("\nThiscycle cannot be done.");
                        break;
                    case "I":
                        txtSolC.append("\nSecond Target: FUL");
                        txtSolC.append("\nThiscycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [R U' D : [R' D R, U2]]");
                        txtSolC.append("\nFull Solution: R U' D R' D R U2 R' D' R U2' D' U R'");
                        break;
                    case "K":
                        txtSolC.append("\nSecond Target: FDR");
                        txtSolC.append("\nThiscycle is D-Side/D-Side.");
                        txtSolC.append("\n\nCycle: [l' U : [D, R U' R']]");
                        txtSolC.append("\nFull Solution: l' U D R U' R' D' R U R' U' l");
                        break;
                    case "L":
                        txtSolC.append("\nSecond Target: FDL");
                        txtSolC.append("\nThiscycle is D-Side/D-Side.");
                        txtSolC.append("\n\nCycle: [D2 : [R U R', D']]");
                        txtSolC.append("\nFull Solution: D2 R U R' D' R U' R' D D2'");
                        break;
                    case "N":
                        txtSolC.append("\nSecond Target: RUB");
                        txtSolC.append("\nThiscycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [U R : [R D' R', U2]]");
                        txtSolC.append("\nFull Solution: U R R D' R' U2 R D R' U2' R' U'");
                        break;
                    case "O":
                        txtSolC.append("\nSecond Target: RDB");
                        txtSolC.append("\nThiscycle is D-Side/D-Side.");
                        txtSolC.append("\n\nCycle: [R D' : [R' U' R, D2]]");
                        txtSolC.append("\nFull Solution: R D' R' U' R D2 R' U R D2' D R'");
                        break;
                    case "P":
                        txtSolC.append("\nSecond Target: RDF");
                        txtSolC.append("\nThiscycle is D-Side/D-Side.");
                        txtSolC.append("\n\nCycle: [D2, R U R']");
                        txtSolC.append("\nFull Solution: D2 R U R' D2' R U' R'");
                        break;
                    case "Q":
                        txtSolC.append("\nSecond Target: BUR");
                        txtSolC.append("\nThiscycle is LUF/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [U' L U, R]");
                        txtSolC.append("\nFull Solution: U' L U R U' L' U R'");
                        break;
                    case "R":
                        txtSolC.append("\nSecond Target: BUL");
                        txtSolC.append("\nThiscycle is U-Side/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [U D R' F' : [D, R U' R']]");
                        txtSolC.append("\nFull Solution: U D R' F' D R U' R' D' R U R' D' F R D' U'");
                        break;
                    case "S":
                        txtSolC.append("\nSecond Target: BDL");
                        txtSolC.append("\nThiscycle cannot be done.");
                        break;
                    case "T":
                        txtSolC.append("\nSecond Target: BDR");
                        txtSolC.append("\nThiscycle is D-Side/D-Side.");
                        txtSolC.append("\n\nCycle: [D2 : [R U R', D]]");
                        txtSolC.append("\nFull Solution: D2 R U R' D R U' R' D' D2'");
                        break;
                    case "U":
                        txtSolC.append("\nSecond Target: DFL");
                        txtSolC.append("\nThiscycle is D-Side/D-Bottom - Special.");
                        txtSolC.append("\n\nCycle: [D R U' R' : [R' D R, U2]]");
                        txtSolC.append("\nFull Solution: D R U' R' R' D R U2 R' D' R U2' R U R' D'");
                        break;
                    case "V":
                        txtSolC.append("\nSecond Target: DFR");
                        txtSolC.append("\nThiscycle is D-Side/D-Bottom - Special.");
                        txtSolC.append("\n\nCycle: [R U' D R' : [R' D R , U2]]");
                        txtSolC.append("\nFull Solution: R U' D R' R' D R U2 R' D' R U2' R D' U R'");
                        break;
                    case "W":
                        txtSolC.append("\nSecond Target: DBR");
                        txtSolC.append("\nThiscycle is D-Side/D-Bottom. - Special.");
                        txtSolC.append("\n\nCycle: [R D' R' : [R' D R , U]]");
                        txtSolC.append("\nFull Solution: R D' R' R' D R U R' D' R U' R D R'");
                        break;
                    case "X":
                        txtSolC.append("\nSecond Target: DBL");
                        txtSolC.append("\nThiscycle canot be done.");
                        break;
                    default:
                        txtSolC.append("\nError. Second Target Entered is Buffer Piece.");
                        break;
                }
                break;
            case "I":
                txtSolC.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolC.setText("");
                txtSolC.append("\nFirst Target: FUL");
                switch (target2) {
                    case "A":
                        txtSolC.append("\nSecond Target: UBL");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: R' D R U' R : [F , R' U R U']");
                        txtSolC.append("\nFull Solution: R' D R U' R F R' U R U' F' U R' U' R R' U R' D' R");
                        break;
                    case "B":
                        txtSolC.append("\nSecond Target: UBR");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R2 U' : [R U R' , D']]");
                        txtSolC.append("\nFull Solution: R2 U' R U R' D' R U' R' D U R2'");
                        break;
                    case "D":
                        txtSolC.append("\nSecond Target: UFL");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "E":
                        txtSolC.append("\nSecond Target: LUB");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [l' U' : [R D' R' , U2]]");
                        txtSolC.append("\nFull Solution: l' U' R D' R' U2 R D R' U2' U l");
                        break;
                    case "F":
                        txtSolC.append("\nSecond Target: LUF");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "G":
                        txtSolC.append("\nSecond Target: LDF");
                        txtSolC.append("\nThis cycle is U-Side/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [R' D : [F2 , D' R D R']]");
                        txtSolC.append("\nFull Solution: R' D F2 D' R D R' F2' R D' R' D D' R");
                        break;
                    case "H":
                        txtSolC.append("\nSecond Target: LDB");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [R U D : [R' D R , U2]]");
                        txtSolC.append("\nFull Solution: R U D R' D R U2 R' D' R U2' D' U' R'");
                        break;
                    case "I":
                        txtSolC.append("\nSecond Target: FUL");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "K":
                        txtSolC.append("\nSecond Target: FDR");
                        txtSolC.append("\nThis cycle is U-Side/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [D' R' D : [F2 , D' R D R']]");
                        txtSolC.append("\nFull Solution: D' R' D F2 D' R D R' F2' R D' R' D D' R D");
                        break;
                    case "L":
                        txtSolC.append("\nSecond Target: FDL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [R U : [R' D R , U2]]");
                        txtSolC.append("\nFull Solution: R U R' D R U2 R' D' R U2' U' R'");
                        break;
                    case "N":
                        txtSolC.append("\nSecond Target: RUB");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R' F' R D U : [U2 , R' D' R]");
                        txtSolC.append("\nFull Solution: R' F' R D U U2 R' D' R U2' R' D R U' D' R' F R");
                        break;
                    case "O":
                        txtSolC.append("\nSecond Target: RDB");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [R D' U : [R' D R , U2]]");
                        txtSolC.append("\nFull Solution: R D' U R' D R U2 R' D' R U2' U' D R'");
                        break;
                    case "P":
                        txtSolC.append("\nSecond Target: RDF");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [D R U : [R' D' R , U2]]");
                        txtSolC.append("\nFull Solution: D R U R' D' R U2 R' D R U2' U' R' D'");
                        break;
                    case "Q":
                        txtSolC.append("\nSecond Target: BUR");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R U D' : [R' D' R , U2]]");
                        txtSolC.append("\nFull Solution: R U D' R' D' R U2 R' D R U2' D U' R'");
                        break;
                    case "R":
                        txtSolC.append("\nSecond Target: BUL");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R U R' U D : [R D R' , U2]]");
                        txtSolC.append("\nFull Solution: R U R' U D R D R' U2 R D' R' U2' D' U' R U' R'");
                        break;
                    case "S":
                        txtSolC.append("\nSecond Target: BDL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [D R' D : [F2 , D' R D R']]");
                        txtSolC.append("\nFull Solution: D R' D F2 D' R D R' F2' R D' R' D D' R D'");
                        break;
                    case "T":
                        txtSolC.append("\nSecond Target: BDR");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [R U : [R' D' R , U2]]");
                        txtSolC.append("\nFull Solution: R U R' D' R U2 R' D R U2' U' R'");
                        break;
                    case "U":
                        txtSolC.append("\nSecond Target: DFL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [D' R : [R D' R' , U2]]");
                        txtSolC.append("\nFull Solution: D' R R D' R' U2 R D R' U2' R' D");
                        break;
                    case "V":
                        txtSolC.append("\nSecond Target: DFR");
                        txtSolC.append("\nThis cycle is U-Side/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [R U' R' D' : [R' D R , U2]]");
                        txtSolC.append("\nFull Solution: R U' R' D' R' D R U2 R' D' R U2' D R U R'");
                        break;
                    case "W":
                        txtSolC.append("\nSecond Target: DBR");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [D R : [R D' R' , U2]]");
                        txtSolC.append("\nFull Solution: D R R D' R' U2 R D R' U2' R' D'");
                        break;
                    case "X":
                        txtSolC.append("\nSecond Target: DBL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [R : [R D' R' , U2]]");
                        txtSolC.append("\nFull Solution: R R D' R' U2 R D R' U2' R'");
                        break;
                    default:
                        txtSolC.append("Error. \nSecond Target Entered is Buffer Piece.");
                        break;
                }
                break;
            case "K":
                txtSolC.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolC.setText("");
                txtSolC.append("\nFirst Target: FDR");
                switch (target2) {
                    case "A":
                        txtSolC.append("\nSecond Target: UBL");
                        txtSolC.append("\nThis cycle is U-Top/D-Side");
                        txtSolC.append("\n\nCycle: [U D : [R D R' , U2]]");
                        txtSolC.append("\nFull Solution: U D R D R' U2 R D' R' U2' D' U'");
                        break;
                    case "B":
                        txtSolC.append("\nSecond Target: UBR");
                        txtSolC.append("\nThis cycle is U-Top/D-Side.");
                        txtSolC.append("\n\nCycle: [D' : [U , R' D R]]");
                        txtSolC.append("\nFull Solution: D' U R' D R U' R' D' R D");
                        break;
                    case "D":
                        txtSolC.append("\nSecond Target: UFL");
                        txtSolC.append("\nThis cycle is U-Top/D-Side.");
                        txtSolC.append("\n\nCycle: [D' : [U', R' D R]]");
                        txtSolC.append("\nFull Solution: D' U' R' D R U R' D' R D");
                        break;
                    case "E":
                        txtSolC.append("\nSecond Target: LUB");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [D' U R' : [R' D R , U']]");
                        txtSolC.append("\nFull Solution: D' U R' R' D R U' R' D' R U R U' D");
                        break;
                    case "F":
                        txtSolC.append("\nSecond Target: LUF");
                        txtSolC.append("\nThis cycle is LUF/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [U R U' : [F , U R' U' R]]");
                        txtSolC.append("\nFull Solution: U R U' F U R' U' R F' R' U R U' U R' U'");
                        break;
                    case "G":
                        txtSolC.append("\nSecond Target: LDF");
                        txtSolC.append("\nThis cycle is D-Side/D-Side.");
                        txtSolC.append("\n\nCycle: [U : [R U' R' , D]]");
                        txtSolC.append("\nFull Solution: U R U' R' D R U R' D'");
                        break;
                    case "H":
                        txtSolC.append("\nSecond Target: LDB");
                        txtSolC.append("\nThis cycle is D-Side/D-Side.");
                        txtSolC.append("\n\nCycle: [l' U : [R U' R' , D]]");
                        txtSolC.append("\nFull Solution: l' U R U' R' D R U R' D' U' l");
                        break;
                    case "I":
                        txtSolC.append("\nSecond Target: FUL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [R' : [F2 , R D' R' D]]");
                        txtSolC.append("\nFull Solution: R' F2 R D R' D F2' D' R D R' R");
                        break;
                    case "K":
                        txtSolC.append("\nSecond Target: FDR");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "L":
                        txtSolC.append("\nSecond Target: FDL");
                        txtSolC.append("\nThis cycle is D-Side/D-Side - Special.");
                        txtSolC.append("\n\nCycle: [R' : [F' , R D' R' D]]");
                        txtSolC.append("\nFull Solution: R' F' R D' R' D F D' R D R' R");
                        break;
                    case "N":
                        txtSolC.append("\nSecond Target: RUB");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [U' R' U : [R D R' , U2]]");
                        txtSolC.append("\nFull Solution: U' R' U R D R' U2 R D' R' U2' U' R U");
                        break;
                    case "O":
                        txtSolC.append("\nSecond Target: RDB");
                        txtSolC.append("\nThis cycle is D-Side/D-Side.");
                        txtSolC.append("\n\nCycle: [U : [R U' R', D']]");
                        txtSolC.append("\nFull Solution: U R U' R' D' R U R' D U'");
                        break;
                    case "P":
                        txtSolC.append("\nSecond Target: RDF");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "Q":
                        txtSolC.append("\nSecond Target: BUR");
                        txtSolC.append("\nThis cycle is BUR/D-Any.");
                        txtSolC.append("\n\nCycle: [D' R' U : [R U' R', D]]");
                        txtSolC.append("\nFull Solution: D' R' U R U' R' D R U R' D' U' R D");
                        break;
                    case "R":
                        txtSolC.append("\nSecond Target: BUL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [U' R' U2 : [R D R', U]]");
                        txtSolC.append("\nFull Solution: U' R' U2 R D R' U R D' R' U' U2' R U");
                        break;
                    case "S":
                        txtSolC.append("\nSecond Target: BDL");
                        txtSolC.append("\nThis cycle is D-Side/D-Side.");
                        txtSolC.append("\n\nCycle: [U : [R U' R', D2]]");
                        txtSolC.append("\nFull Solution: U R U' R' D2 R U R' D2' U'");
                        break;
                    case "T":
                        txtSolC.append("\nSecond Target: BDR");
                        txtSolC.append("\nThis cycle is U-Side/U-Side - Special.");
                        txtSolC.append("\n\nCycle: [R U R' U' : [D', R U R']]");
                        txtSolC.append("\nFull Solution: R U R' U' D' R U R' D R U' R' U R U' R'");
                        break;
                    case "U":
                        txtSolC.append("\nSecond Target: DFL");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom - Special.");
                        txtSolC.append("\n\nCycle: [U R U' : [F2', U R' U' R]]");
                        txtSolC.append("\nFull Solution: U R U' F2' U R' U' R F2 R' U R U' U R' U'");
                        break;
                    case "V":
                        txtSolC.append("\nSecond Target: DFR");
                        txtSolC.append("\nThis cycle cannot be done. ");
                        break;
                    case "W":
                        txtSolC.append("\nSecond Target: DBR");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom.");
                        txtSolC.append("\n\nCycle: [U R' D' : [U', R' D R]]");
                        txtSolC.append("\nFull Solution: U R' D' U' R' D R U R' D' R D R U'");
                        break;
                    case "X":
                        txtSolC.append("\nSecond Target: DBL");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom - Special.");
                        txtSolC.append("\n\nCycle: [R' D' R : [R U R' , D]]");
                        txtSolC.append("\nFull Solution: R' D' R R U R' D R U' R' D' R' D R");
                        break;
                    default:
                        txtSolC.append("\nError. Second Target Entered is Buffer Piece.");
                        break;
                }
                break;
            case "L":
                txtSolC.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolC.setText("");
                txtSolC.append("\nFirst Target: FDL");
                switch (target2) {
                    case "A":
                        txtSolC.append("\nSecond Target: UBL");
                        txtSolC.append("\n\nThis cycle is U-Top/D-Side.");
                        txtSolC.append("\n\nCycle: [D' U : [R D' R' , U2]]");
                        txtSolC.append("\nFull Solution: D' U R D' R' U2 R D R' U2' U' D");
                        break;
                    case "B":
                        txtSolC.append("\nSecond Target: UBR");
                        txtSolC.append("\n\nThis cycle is U-Top/D-Side.");
                        txtSolC.append("\n\nCycle: [D : [U , R' D' R]]");
                        txtSolC.append("\nFull Solution: D U R' D' R U' R' D R D'");
                        break;
                    case "D":
                        txtSolC.append("\nSecond Target: UFL");
                        txtSolC.append("\n\nThis cycle is U-Top/D-Side.");
                        txtSolC.append("\n\nCycle: [D : [U' , R' D' R]]");
                        txtSolC.append("\nFull Solution: D U' R' D' R U R' D R D'");
                        break;
                    case "E":
                        txtSolC.append("\nSecond Target: LUB");
                        txtSolC.append("\n\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [R U2 : [R' D R , U']]");
                        txtSolC.append("\nFull Solution: R U2 R' D R U' R' D' R U U2' R'");
                        break;
                    case "F":
                        txtSolC.append("\nSecond Target: LUF");
                        txtSolC.append("\n\nThis cycle is LUF/D-Any.");
                        txtSolC.append("\n\nCycle: [D R' U' : [R U R' , D']]");
                        txtSolC.append("\nFull Solution: D R' U' R U R' D' R U' R' D U R D'");
                        break;
                    case "G":
                        txtSolC.append("\nSecond Target: LDF");
                        txtSolC.append("\n\nThis cycle cannot be done.");
                        break;
                    case "H":
                        txtSolC.append("\nSecond Target: LDB");
                        txtSolC.append("\n\nThis cycle is D-Side/D-Side.");
                        txtSolC.append("\n\nCycle: [D : [R U R' , D]]");
                        txtSolC.append("\nFull Solution: D R U R' D R U' R' D' D'");
                        break;
                    case "I":
                        txtSolC.append("\nSecond Target: FUL");
                        txtSolC.append("\n\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [R U' : [R' D R , U U]]");
                        txtSolC.append("\nFull Solution: R U' R' D R U2 R' D' R U2 U R'");
                        break;
                    case "K":
                        txtSolC.append("\nSecond Target: FDR");
                        txtSolC.append("\n\nThis cycle is D-Side/D-Side - Special.");
                        txtSolC.append("\n\nCycle: [D' R' D : [F' , D' R D R']]");
                        txtSolC.append("\nFull Solution: D' R' D F' D' R D R' F R D' R' D D' R D");
                        break;
                    case "L":
                        txtSolC.append("\nSecond Target: FDL");
                        txtSolC.append("\n\nThis cycle cannot be done.");
                        break;
                    case "N":
                        txtSolC.append("\nSecond Target: RUB");
                        txtSolC.append("\n\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [U R U D : [R' D' R , U2]]");
                        txtSolC.append("\nFull Solution: U R U D R' D' R U2 R' D R U2' D' U' R' U'");
                        break;
                    case "O":
                        txtSolC.append("\nSecond Target: RDB");
                        txtSolC.append("\n\nThis cycle is D-Side/D-Side.");
                        txtSolC.append("\n\nCycle: [R D2 : [R' U' R , D']]");
                        txtSolC.append("\nFull Solution: R D2 R' U' R D' R' U R D D2' R'");
                        break;
                    case "P":
                        txtSolC.append("\nSecond Target: RDF");
                        txtSolC.append("\n\nThis cycle is D-Side/D-Side.");
                        txtSolC.append("\n\nCycle: [D, R U R']");
                        txtSolC.append("\nFull Solution: D R U R' D' R U' R'");
                        break;
                    case "Q":
                        txtSolC.append("\nSecond Target: BUR");
                        txtSolC.append("\n\nThis cycle is BUR/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [R' F : [R U' R' , D]]");
                        txtSolC.append("\nFull Solution: R' F R U' R' D R U R' D' F' R");
                        break;
                    case "R":
                        txtSolC.append("\nSecond Target: BUL");
                        txtSolC.append("\n\nThis cycle is U-Side/D-Any - Special");
                        txtSolC.append("\n\nCycle: D R' : [D, R' U R]");
                        txtSolC.append("\nFull Solution: D R' D R' U R D' R' U' R R D'");
                        break;
                    case "S":
                        txtSolC.append("\nSecond Target: BDL");
                        txtSolC.append("\n\nThis cycle is D-Side/D-Side.");
                        txtSolC.append("\n\nCycle: [D' R D' : [R' U' R , D2]]");
                        txtSolC.append("\nFull Solution: D' R D' R' U' R D2 R' U R D2' D R' D");
                        break;
                    case "T":
                        txtSolC.append("\nSecond Target: BDR");
                        txtSolC.append("\n\nThis cycle is D-Side/D-Side.");
                        txtSolC.append("\n\nCycle: [D : [R U R', D2]]");
                        txtSolC.append("\nFull Solution: D R U R' D2 R U' R' D2' D'");
                        break;
                    case "U":
                        txtSolC.append("\nSecond Target: DFL");
                        txtSolC.append("\n\nThis cycle is cannot be done.");
                        break;
                    case "V":
                        txtSolC.append("\nSecond Target: DFR");
                        txtSolC.append("\n\nThis cycle is D-Side/D-Bottom - Special.");
                        txtSolC.append("\n\nCycle: [R U' R' : [R' D R , U2]]");
                        txtSolC.append("\nFull Solution: R U' R' R' D R U2 R' D' R U2' R U R'");
                        break;
                    case "W":
                        txtSolC.append("\nSecond Target: DBR");
                        txtSolC.append("\n\nThis cycle is D-Side/D-Bottom.");
                        txtSolC.append("\n\nCycle: [D R : [R D' R', U']]");
                        txtSolC.append("\nFull Solution: D R R D' R' U' R D R' U R' D'");
                        break;
                    case "X":
                        txtSolC.append("\nSecond Target: DBL");
                        txtSolC.append("\n\nThis cycle is D-Side/D-Bottom.");
                        txtSolC.append("\n\nCycle: [D R D : [U, R' D' R]]");
                        txtSolC.append("\nFull Solution: D R D U R' D' R U' R' D R D' R' D'");
                        break;
                    default:
                        txtSolC.append("\nError. Second Target Entered is Buffer Piece.");
                        break;
                }
                break;
            case "N":
                txtSolC.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolC.setText("");
                txtSolC.append("\nFirst Target: RUB");
                switch (target2) {
                    case "A":
                        txtSolC.append("\nSecond Target: UBL");
                        txtSolC.append("\n\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R' U D R : [D' , R U' R']]");
                        txtSolC.append("\nFull Solution: R' U D R D' R U' R' D R U R' R' D' U' R");
                        break;
                    case "B":
                        txtSolC.append("\nSecond Target: UBR");
                        txtSolC.append("\n\nThis cycle cannot be done.");
                        break;
                    case "D":
                        txtSolC.append("\nSecond Target: UFL");
                        txtSolC.append("\n\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [U' R2' : [D' R U2 R']]");
                        txtSolC.append("\nFull Solution: U' R2' D' R U2 R' D R U2' R' R2 U");
                        break;
                    case "E":
                        txtSolC.append("\nSecond Target: LUB");
                        txtSolC.append("\n\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R : [U , R2 D R2 D' R2]]");
                        txtSolC.append("\nFull Solution: R U R2 D R2 D' R2 U' R2' D R2' D' R2'");
                        break;
                    case "F":
                        txtSolC.append("\nSecond Target: LUF");
                        txtSolC.append("\n\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R U' D' R' : [R' U R , D]]");
                        txtSolC.append("\nFull Solution: R U' D' R' R' U R D R' U' R D R D U R'");
                        break;
                    case "G":
                        txtSolC.append("\nSecond Target: LDF");
                        txtSolC.append("\n\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [U R U' : [R' D R, U2]]");
                        txtSolC.append("\nFull Solution: U R U' R' D R U2 R' D' R U2' U R' U'");
                        break;
                    case "H":
                        txtSolC.append("\nSecond Target: LDB");
                        txtSolC.append("\n\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [U R : [U2, R D' R']]");
                        txtSolC.append("\nFull Solution: U R U2 R D' R' U2' R D R' R' U'");
                        break;
                    case "I":
                        txtSolC.append("\nSecond Target: FUL");
                        txtSolC.append("\n\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R' F' R D U : [R' D' R, U2]");
                        txtSolC.append("\nFull Solution: R' F' R D U R' D' R U2 R' D R U2' U' D' R' F R");
                        break;
                    case "K":
                        txtSolC.append("\nSecond Target: FDR");
                        txtSolC.append("\n\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [U' R' U' : [R D R', U2]]");
                        txtSolC.append("\nFull Solution: U' R' U' R D R' U2 R D' R' U2' U R U");
                        break;
                    case "L":
                        txtSolC.append("\nSecond Target: FDL");
                        txtSolC.append("\n\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [U R U' D : [R' D' R, U2]]");
                        txtSolC.append("\nFull Solution: U R U' D R' D' R U2 R' D R U2' D' U R' U'");
                        break;
                    case "N":
                        txtSolC.append("\nSecond Target: RUB");
                        txtSolC.append("\n\nThis cycle cannot be done.");
                        break;
                    case "O":
                        txtSolC.append("\nSecond Target: RDB");
                        txtSolC.append("\n\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [U R U' : [R' D' R, U2]]");
                        txtSolC.append("\nFull Solution: U R U' R' D' R U2' R' D R U2' U R' U'");
                        break;
                    case "P":
                        txtSolC.append("\nSecond Target: RDF");
                        txtSolC.append("\n\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [U' R' D U' : [R D' R', U2]]");
                        txtSolC.append("\nFull Solution: U' R' D U' R D' R' U2 R D R' U2' U D' R U");
                        break;
                    case "Q":
                        txtSolC.append("\nSecond Target: BUR");
                        txtSolC.append("\n\nThis cycle cannot be done.");
                        break;
                    case "R":
                        txtSolC.append("\nSecond Target: BUL");
                        txtSolC.append("\n\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [U R2 U' : [D', R U R']]");
                        txtSolC.append("\nFull Solution: U R2 U' D' R U R' D R U' R' U R2' U'");
                        break;
                    case "S":
                        txtSolC.append("\nSecond Target: BDL");
                        txtSolC.append("\n\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [U' R' U' : [R D' R', U2]]");
                        txtSolC.append("\nFull Solution: U' R' U' R D' R' U2 R D R' U2' U R U");
                        break;
                    case "T":
                        txtSolC.append("\nSecond Target: BDR");
                        txtSolC.append("\n\nThis cycle is U-Side/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [R' F' R D' U : [R' D R, U2]]");
                        txtSolC.append("\nFull Solution: R' F' R D' U R' D R U2 R' D' R U2' U' D R' F R");
                        break;
                    case "U":
                        txtSolC.append("\nSecond Target: DFL");
                        txtSolC.append("\n\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [U' R' : [R' D R, U2]]");
                        txtSolC.append("\nFull Solution: U' R' R' D R U2 R' D' R U2' R U");
                        break;
                    case "V":
                        txtSolC.append("\nSecond Target: DFR");
                        txtSolC.append("\n\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [D' U' R' : [R' D R, U2]]");
                        txtSolC.append("\nFull Solution: D' U' R' R' D R U2 R' D' R U2' R U D");
                        break;
                    case "W":
                        txtSolC.append("\nSecond Target: DBR");
                        txtSolC.append("\n\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [U R U' D' : [R' D R, U2]]");
                        txtSolC.append("\nFull Solution: U R U' D' R' D R U2 R' D' R U2' D U R' U'");
                        break;
                    case "X":
                        txtSolC.append("\nSecond Target: DBL");
                        txtSolC.append("\n\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [D U' R' : [R' D R, U2]]");
                        txtSolC.append("\nFull Solution: D U' R' R' D R U2 R' D' R U2' R U D'");
                        break;
                    default:
                        txtSolC.append("Error. \nSecond Target Entered is Buffer Piece.");
                        break;
                }
                break;
            case "O":
                txtSolC.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolC.setText("");
                txtSolC.append("\nFirst Target: RDB");
                switch (target2) {
                    case "A":
                        txtSolC.append("\nSecond Target: UBL");
                        txtSolC.append("\nThis cycle is U-Top/D-Side.");
                        txtSolC.append("\nCycle: [U : [R D R', U2]]");
                        txtSolC.append("\nFull Solution: U R D R' U2 R D' R' U2' U'");
                        break;
                    case "B":
                        txtSolC.append("\nSecond Target: UBR");
                        txtSolC.append("\nThis cycle is U-Top/D-Side.");
                        txtSolC.append("\nCycle: [R D R', U']");
                        txtSolC.append("\nFull Solution: R D R' U' R D' R' U");
                        break;
                    case "D":
                        txtSolC.append("\nSecond Target: UFL");
                        txtSolC.append("\nThis cycle is U-Top/D-Side.");
                        txtSolC.append("\nCycle: [U2 : [R D R', U]]");
                        txtSolC.append("\nFull Solution: U2 R D R' U R D' R' U' U2'");
                        break;
                    case "E":
                        txtSolC.append("\nSecond Target: LUB");
                        txtSolC.append("\nThis cycle is U-Side/D-Any - Special.");
                        txtSolC.append("\nCycle: [U' R' F R : [R D R', U']]");
                        txtSolC.append("\nFull Solution: U' R' F R R D R' U' R D' R' U R' F' R U");
                        break;
                    case "F":
                        txtSolC.append("\nSecond Target: LUF");
                        txtSolC.append("\nThis cycle is LUF/D-Any - Special.");
                        txtSolC.append("\nCycle: [D' R : [R' U R U', F]]");
                        txtSolC.append("\nFull Solution: D' R R' U R U' F U R' U' R F' R' D");
                        break;
                    case "G":
                        txtSolC.append("\nSecond Target: LDF");
                        txtSolC.append("\nThis cycle is D-Side/D-Side.");
                        txtSolC.append("\nCycle: [U D' : [R U' R' , D2]]");
                        txtSolC.append("\nFull Solution: U D' R U' R' D2 R U R' D2' D U'");
                        break;
                    case "H":
                        txtSolC.append("\nSecond Target: LDB");
                        txtSolC.append("\nThis cycle is D-Side/D-Side.");
                        txtSolC.append("\nCycle: [R D : [R' U' R , D2]]");
                        txtSolC.append("\nFull Solution: R D R' U' R D2 R' U R D2' D' R'");
                        break;
                    case "I":
                        txtSolC.append("\nSecond Target: FUL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\nCycle: [R D' U' : [R' D R , U2]]");
                        txtSolC.append("\nFull Solution: R D' U' R' D R U2 R' D' R U2' U D R'");
                        break;
                    case "K":
                        txtSolC.append("\nSecond Target: FDR");
                        txtSolC.append("\nThis cycle is D-Side/D-Side.");
                        txtSolC.append("\nCycle: [U : [D', R U' R']]");
                        txtSolC.append("\nFull Solution: U D' R U' R' D R U R' U'");
                        break;
                    case "L":
                        txtSolC.append("\nSecond Target: FDL");
                        txtSolC.append("\nThis cycle is D-Side/D-Side.");
                        txtSolC.append("\nCycle: [R D : [R' U' R, D]]");
                        txtSolC.append("\nFull Solution: R D R' U' R D R' U R D' D' R'");
                        break;
                    case "N":
                        txtSolC.append("\nSecond Target: RUB");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\nCycle: [U R U : [R' D' R, U2]]");
                        txtSolC.append("\nFull Solution: U R U R' D' R U2 R' D R U2' U' R' U'");
                        break;
                    case "O":
                        txtSolC.append("\nSecond Target: RDB");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "P":
                        txtSolC.append("\nSecond Target: RDF");
                        txtSolC.append("\nThis cycle is D-Side/D-Side.");
                        txtSolC.append("\nCycle: [R D' : [R' D R, U]]");
                        txtSolC.append("\nFull Solution: R D' R' D R U R' D' R U' D R'");
                        break;
                    case "Q":
                        txtSolC.append("\nSecond Target: BUR");
                        txtSolC.append("\nThis cycle is BUR/D-Any.");
                        txtSolC.append("\nCycle: [U' R U : [R' U' R, D]]");
                        txtSolC.append("\nFull Solution: U' R U R' U' R D R' U R D' U' R' U");
                        break;
                    case "R":
                        txtSolC.append("\nSecond Target: BUL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any - Special.");
                        txtSolC.append("\nCycle: [R D' : [R' U' R, D]]");
                        txtSolC.append("\nFull Solution: R D' R' U' R D R' U R D' D R'");
                        break;
                    case "S":
                        txtSolC.append("\nSecond Target: BDL");
                        txtSolC.append("\nThis cycle is D-Side/D-Side.");
                        txtSolC.append("\nCycle: [U' : [R' U' R, D']]");
                        txtSolC.append("\nFull Solution: U' R' U' R D' R' U R D U");
                        break;
                    case "T":
                        txtSolC.append("\nSecond Target: BDR");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "U":
                        txtSolC.append("\nSecond Target: DFL");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom.");
                        txtSolC.append("\nCycle: [U' R' : [R' D R, U]]");
                        txtSolC.append("\nFull Solution: U' R' R' D R U R' D' R U' R U");
                        break;
                    case "V":
                        txtSolC.append("\nSecond Target: DFR");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom - Special.");
                        txtSolC.append("\nCycle: [D' U R U' : [F2, U R' U' R]]");
                        txtSolC.append("\nFull Solution: D' U R U' F2 U R' U' R F2' R' U R U' U R' U' D");
                        break;
                    case "W":
                        txtSolC.append("\nSecond Target: DBR");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "X":
                        txtSolC.append("\nSecond Target: DBL");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom.");
                        txtSolC.append("\nCycle: [U D' R D' : [U', R' D R]]");
                        txtSolC.append("\nFull Solution: U D' R D' U' R' D R U R' D' R D R' D U'");
                        break;
                    default:
                        txtSolC.append("Error. \nSecond Target Entered is Buffer Piece.");
                        break;
                }
                break;
            case "P":
                txtSolC.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolC.setText("");
                txtSolC.append("\nFirst Target: RDF");
                switch (target2) {
                    case "A":
                        txtSolC.append("\nSecond Target: UBL");
                        txtSolC.append("\nThis cycle is U-Top/D-Side.");
                        txtSolC.append("\nCycle: [U2, R' D' R]");
                        txtSolC.append("\nFull Solution: U2 R' D' R U2' R' D R");
                        break;
                    case "B":
                        txtSolC.append("\nSecond Target: UBR");
                        txtSolC.append("\nThis cycle is U-Top/D-Side.");
                        txtSolC.append("\nCycle: [U, R' D' R]");
                        txtSolC.append("\nFull Solution: U R' D' R U' R' D R");
                        break;
                    case "D":
                        txtSolC.append("\nSecond Target: UFL");
                        txtSolC.append("\nThis cycle is U-Top/D-Side.");
                        txtSolC.append("\nCycle: [U', R' D' R]");
                        txtSolC.append("\nFull Solution: U' R' D' R U R' D R");
                        break;
                    case "E":
                        txtSolC.append("\nSecond Target: LUB");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\nCycle: [U R' U' : [R D R', U']]");
                        txtSolC.append("\nFull Solution: U R' U' R D R' U' R D' R' U U R U'");
                        break;
                    case "F":
                        txtSolC.append("\nSecond Target: LUF");
                        txtSolC.append("\nThis cycle is LUF/D-Any");
                        txtSolC.append("\nCycle: [R' U' : [R U R' , D']]");
                        txtSolC.append("\nFull Solution: R' U' R U R' D' R U' R' D U R");
                        break;
                    case "G":
                        txtSolC.append("\nSecond Target: LDF");
                        txtSolC.append("\nThis cycle is D-Side/D-Side.");
                        txtSolC.append("\nCycle: [U R' D' : [R U' R', D2]]");
                        txtSolC.append("\nFull Solution: U R' D' R U' R' D2 R U R' D2' D R U'");
                        break;
                    case "H":
                        txtSolC.append("\nSecond Target: LDB");
                        txtSolC.append("\nThis cycle is D-Side/D-Side.");
                        txtSolC.append("\nCycle: [R U R', D2]");
                        txtSolC.append("\nFull Solution: R U R' D2 R U' R' D2'");
                        break;
                    case "I":
                        txtSolC.append("\nSecond Target: FUL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\nCycle: [D R U' : [R' D' R, U2]]");
                        txtSolC.append("\nFull Solution: D R U' R' D' R U2 R' D R U2' U R' D'");
                        break;
                    case "K":
                        txtSolC.append("\nSecond Target: FDR");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "L":
                        txtSolC.append("\nSecond Target: FDL");
                        txtSolC.append("\nThis cycle is D-Side/D-Side.");
                        txtSolC.append("\nCycle: [R U R', D]");
                        txtSolC.append("\nFull Solution: R U R' D R U' R' D'");
                        break;
                    case "N":
                        txtSolC.append("\nSecond Target: RUB");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\nCycle: [U' R' D U : [R D' R', U2]]");
                        txtSolC.append("\nFull Solution: U' R' D U R D' R' U2 R D R' U2' U' D' R U");
                        break;
                    case "O":
                        txtSolC.append("\nSecond Target: RDB");
                        txtSolC.append("\nThis cycle is D-Side/D-Side - Special.");
                        txtSolC.append("\nCycle: [R D' : [U, R' D R]]");
                        txtSolC.append("\nFull Solution: R D' U R' D R U' R' D' R D R'");
                        break;
                    case "P":
                        txtSolC.append("\nSecond Target: RDF");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "Q":
                        txtSolC.append("\nSecond Target: BUR");
                        txtSolC.append("\nThis cycle is BUR/D-Any.");
                        txtSolC.append("\nCycle: [R' U : [R U' R', D']]");
                        txtSolC.append("\nFull Solution: R' U R U' R' D' R U R' D U' R");
                        break;
                    case "R":
                        txtSolC.append("\nSecond Target: BUL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any - Special.");
                        txtSolC.append("\nCycle: [R' : [D, R' U R]]");
                        txtSolC.append("\nFull Solution: R' D R' U R D' R' U' R R");
                        break;
                    case "S":
                        txtSolC.append("\nSecond Target: BDL");
                        txtSolC.append("\nThis cycle is D-Side/D-Side.");
                        txtSolC.append("\nCycle: [U R' D' : [R U' R' , D']]");
                        txtSolC.append("\nFull Solution: U R' D' R U' R' D' R U R' D D R U'");
                        break;
                    case "T":
                        txtSolC.append("\nSecond Target: BDR");
                        txtSolC.append("\nThis cycle is D-Side/D-Side.");
                        txtSolC.append("\nCycle: [R U R', D']");
                        txtSolC.append("\nFull Solution: R U R' D' R U' R' D");
                        break;
                    case "U":
                        txtSolC.append("\nSecond Target: DFL");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom.");
                        txtSolC.append("\nCycle: [R D : [U, R' D' R]]");
                        txtSolC.append("\nFull Solution: R D U R' D' R U' R' D R D' R'");
                        break;
                    case "V":
                        txtSolC.append("\nSecond Target: DFR");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "W":
                        txtSolC.append("\nSecond Target: DBR");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom - Special.");
                        txtSolC.append("\nCycle: [D' R U' R' : [R' D R, U2]]");
                        txtSolC.append("\nFull Solution: D' R U' R' R' D R U2 R' D' R U2' R U R' D");
                        break;
                    case "X":
                        txtSolC.append("\nSecond Target: DBL");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom.");
                        txtSolC.append("\nCycle: [R : [R D' R', U']]");
                        txtSolC.append("\nFull Solution: R R D' R' U' R D R' U R'");
                        break;
                    default:
                        txtSolC.append("\nError. Second Target Entered is Buffer Piece.");
                        break;
                }
                break;
            case "Q":
                txtSolC.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolC.setText("");
                txtSolC.append("\nFirst Target: BUR");
                switch (target2) {
                    case "A":
                        txtSolC.append("\nSecond Target: UBL");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R' U' D : [R D R', U2]]");
                        txtSolC.append("\nFull Solution: R' U' D R D R' U2 R D' R' U2' D' U R");
                        break;
                    case "B":
                        txtSolC.append("\nSecond Target: UBR");
                        txtSolC.append("\n\nThis cycle cannot be done.");
                        break;
                    case "D":
                        txtSolC.append("\nSecond Target: UFL");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R' D' : [R' D R, U']]");
                        txtSolC.append("\nFull Solution: R' D' R' D R U' R' D' R U D R");
                        break;
                    case "E":
                        txtSolC.append("\nSecond Target: LUB");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [F' L F, R']");
                        txtSolC.append("\nFull Solution: F' L F R' F' L' F R");
                        break;
                    case "F":
                        txtSolC.append("\nSecond Target: LUF");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R' F : [D, R U R']]");
                        txtSolC.append("\nFull Solution: R' F D R U R' D' R U' R' F' R");
                        break;
                    case "G":
                        txtSolC.append("\nSecond Target: LDF");
                        txtSolC.append("\nThis cycle is BUR/D-Any.");
                        txtSolC.append("\n\nCycle: [R' U : [D, R U' R']]");
                        txtSolC.append("\nFull Solution: R' U D R U' R' D' R U R' U' R");
                        break;
                    case "H":
                        txtSolC.append("\nSecond Target: LDB");
                        txtSolC.append("\nThis cycle is BUR/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [R, U' L U]");
                        txtSolC.append("\nFull Solution: R U' L U R' U' L' U");
                        break;
                    case "I":
                        txtSolC.append("\nSecond Target: FUL");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R D' U' : [R' D' R, U2]]");
                        txtSolC.append("\nFull Solution: R D' U' R' D' R U2 R' D R U2' U D R'");
                        break;
                    case "K":
                        txtSolC.append("\nSecond Target: FDR");
                        txtSolC.append("\nThis cycle is BUR/D-Any.");
                        txtSolC.append("\n\nCycle: [D' R' U : [D, R U' R']]");
                        txtSolC.append("\nFull Solution: D' R' U D R U' R' D' R U R' U' R D");
                        break;
                    case "L":
                        txtSolC.append("\nSecond Target: FDL");
                        txtSolC.append("\nThis cycle is BUR/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [R' F : [D, R U' R']]");
                        txtSolC.append("\nFull Solution: R' F D R U' R' D' R U R' F' R");
                        break;
                    case "N":
                        txtSolC.append("\nSecond Target: RUB");
                        txtSolC.append("\n\nThis cycle cannot be done.");
                        break;
                    case "O":
                        txtSolC.append("\nSecond Target: RDB");
                        txtSolC.append("\nThis cycle is BUR/D-Any.");
                        txtSolC.append("\n\nCycle: [U' R U : [D, R' U' R]]");
                        txtSolC.append("\nFull Solution: U' R U D R' U' R D' R' U R U' R' U");
                        break;
                    case "P":
                        txtSolC.append("\nSecond Target: RDF");
                        txtSolC.append("\nThis cycle is BUR/D-Any.");
                        txtSolC.append("\n\nCycle: [R' U : [D' , R U' R']]");
                        txtSolC.append("\nFull Solution: R' U D' R U' R' D R U R' U' R");
                        break;
                    case "Q":
                        txtSolC.append("\nSecond Target: BUR");
                        txtSolC.append("\n\nThis cycle cannot be done.");
                        break;
                    case "R":
                        txtSolC.append("\nSecond Target: BUL");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R, U' L' U]");
                        txtSolC.append("\nFull Solution: R U' L' U R' U' L U");
                        break;
                    case "S":
                        txtSolC.append("\nSecond Target: BDL");
                        txtSolC.append("\nThis cycle is BUR/D-Any.");
                        txtSolC.append("\n\nCycle: [D R' U : [D , R U' R']]");
                        txtSolC.append("\nFull Solution: D R' U D R U' R' D' R U R' D' U' R D'");
                        break;
                    case "T":
                        txtSolC.append("\nSecond Target: BDR");
                        txtSolC.append("\nThis cycle is BUR/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [R U' : [R' U R, D]]");
                        txtSolC.append("\nFull Solution: R U' R' U R D R' U' R D' U R'");
                        break;
                    case "U":
                        txtSolC.append("\nSecond Target: DFL");
                        txtSolC.append("\nThis cycle is BUR/D-Any.");
                        txtSolC.append("\n\nCycle: [D' R U' : [R' U R, D']]");
                        txtSolC.append("\nFull Solution: D' R U' R' U R D' R' U' R D U R' D");
                        break;
                    case "V":
                        txtSolC.append("\nSecond Target: DFR");
                        txtSolC.append("\nThis cycle is BUR/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [U R' U' : [R U R', D']]");
                        txtSolC.append("\nFull Solution: U R' U' R U R' D' R U' R' D U R U'");
                        break;
                    case "W":
                        txtSolC.append("\nSecond Target: DBR");
                        txtSolC.append("\nThis cycle is BUR/D-Any.");
                        txtSolC.append("\n\nCycle: [D R U' : [R' U R, D']]");
                        txtSolC.append("\nFull Solution: D R U' R' U R D' R' U' R D U R' D'");
                        break;
                    case "X":
                        txtSolC.append("\nSecond Target: DBL");
                        txtSolC.append("\nThis cycle is BUR/D-Any.");
                        txtSolC.append("\n\nCycle: [R U' : [R' U R, D']]");
                        txtSolC.append("\nFull Solution: R U' R' U R D' R' U' R D U R'");
                        break;
                    default:
                        txtSolC.append("\nError. Second Target Entered is Buffer Piece.");
                        break;
                }
                break;
            case "R": 
                txtSolC.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolC.setText("");
                txtSolC.append("\nFirst Target: BUL");
                switch (target2) {
                    case "A":
                        txtSolC.append("\nSecond Target: UBL");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "B":
                        txtSolC.append("\nSecond Target: BUR");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R2 U : [D, R' U' R]]");
                        txtSolC.append("\nFull Solution: R2 U D R' U' R D' R' U R U' R2'");
                        break;
                    case "D":
                        txtSolC.append("\nSecond Target: UFR");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [U' R2' : [D', R U' R']]");
                        txtSolC.append("\nFull Solution: U' R2' D' R U' R' D R U R' R2 U");
                        break;
                    case "E":
                        txtSolC.append("\nSecond Target: LUB");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "F":
                        txtSolC.append("\nSecond Target: LUF");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [F, l U' l']");
                        txtSolC.append("\nFull Solution: F l U' l' F' l U l'");
                        break;
                    case "G":
                        txtSolC.append("\nSecond Target: LDF");
                        txtSolC.append("\nThis cycle is U-Side/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [R B' R' : [U, R' D R]]");
                        txtSolC.append("\nFull Solution: R D' R' U R' D R U' R' D' R R D R'");
                        break;
                    case "H":
                        txtSolC.append("\nSecond Target: LDB");
                        txtSolC.append("\nThis cycle is U-Side/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [U D R' F' : [R U' R', D]]");
                        txtSolC.append("\nFull Solution: U D R' F' R U' R' D R U R' D' F R D' U'");
                        break;
                    case "I":
                        txtSolC.append("\nSecond Target: FUL");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [R U R' D' : [R' D R , U2]]");
                        txtSolC.append("\nFull Solution: R U R' D' R' D R U2 R' D' R U2' D R U' R'");
                        break;
                    case "K":
                        txtSolC.append("\nSecond Target: FDR");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [U' R' U' : [R D R', U']]");
                        txtSolC.append("\nFull Solution: U' R' U' R D R' U' R D' R' U U R U");
                        break;
                    case "L":
                        txtSolC.append("\nSecond Target: FDL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [D R' : [R' U R, D]]");
                        txtSolC.append("\nFull Solution: D R' R' U R D R' U' R D' R D'");
                        break;
                    case "N":
                        txtSolC.append("\nSecond Target: RUB");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [U R2 U' : [R U R' , D']]");
                        txtSolC.append("\nFull Solution: U R2 U' R U R' D' R U' R' D U R2' U'");
                        break;
                    case "O":
                        txtSolC.append("\nSecond Target: RDB");
                        txtSolC.append("\nThis cycle is U-Side/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [R B' : [D, R' U' R]]");
                        txtSolC.append("\nFull Solution: R B' D R' U' R D' R' U R B R'");
                        break;
                    case "P":
                        txtSolC.append("\nSecond Target: RDF");
                        txtSolC.append("\nThis cycle is U-Side/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [R2' : [U, R D R']]");
                        txtSolC.append("\nFull Solution: R2' U R D R' U' R D' R' R2");
                        break;
                    case "Q":
                        txtSolC.append("\nSecond Target: BUR");
                        txtSolC.append("\nThis cycle is U-Any/U-Any.");
                        txtSolC.append("\n\nCycle: [U' L' U, R]");
                        txtSolC.append("\nFull Solution: U' L' U R U' L U R'");
                        break;
                    case "R":
                        txtSolC.append("\nSecond Target: BUL");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "S":
                        txtSolC.append("\nSecond Target: BDL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [U' R' U' : [R D' R', U']]");
                        txtSolC.append("\nFull Solution: U' R' U' R D' R' U' R D R' U U R U");
                        break;
                    case "T":
                        txtSolC.append("\nSecond Target: BDR");
                        txtSolC.append("\nThis cycle is ");
                        txtSolC.append("\n\nCycle: [D' R2' : [U, R D R']]");
                        txtSolC.append("\nFull Solution: D' R2' U R D R' U' R D' R' R2 D");
                        break;
                    case "U":
                        txtSolC.append("\nSecond Target: DFL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [U' R' : [R' D R , U']]");
                        txtSolC.append("\nFull Solution: U' R' R' D R U' R' D' R U R U");
                        break;
                    case "V":
                        txtSolC.append("\nSecond Target: DFR");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [D' U' R' : [R' D R, U']]");
                        txtSolC.append("\nFull Solution: D' U' R' R' D R U' R' D' R U R U D");
                        break;
                    case "W":
                        txtSolC.append("\nSecond Target: DBR");
                        txtSolC.append("\nThis cycle is U-Side/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [U R : [D', R U' R']]");
                        txtSolC.append("\nFull Solution: U R D' R U' R' D R U R' R' U'");
                        break;
                    case "X":
                        txtSolC.append("\nSecond Target: DBL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [R2 U : [D', R' U' R]]");
                        txtSolC.append("\nFull Solution: R2 U D' R' U' R D R' U R U' R2'");
                        break;
                    default:
                        txtSolC.append("\nError. Second Target Entered is Buffer Piece.");
                        break;
                }
                break;
            case "S": 
                txtSolC.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolC.setText("");
                txtSolC.append("\nFirst Target: BDL");
                switch (target2) {
                    case "A":
                        txtSolC.append("\nSecond Target: UBL");
                        txtSolC.append("\nThis cycle is U-Top/D-Side.");
                        txtSolC.append("\n\nCycle: [U D' : [R D R', U2]]");
                        txtSolC.append("\nFull Solution: U D' R D R' U2 R D' R' U2' D U'");
                        break;
                    case "B":
                        txtSolC.append("\nSecond Target: UBR");
                        txtSolC.append("\nThis cycle is U-Top/D-Side.");
                        txtSolC.append("\n\nCycle: [D' : [R D R' , U']]");
                        txtSolC.append("\nFull Solution: D' R D R' U' R D' R' U D");
                        break;
                    case "D":
                        txtSolC.append("\nSecond Target: UFL");
                        txtSolC.append("\nThis cycle is U-Top/D-Side.");
                        txtSolC.append("\n\nCycle: [D : [U', R' D R]]");
                        txtSolC.append("\nFull Solution: D U' R' D R U R' D' R D'");
                        break;
                    case "E":
                        txtSolC.append("\nSecond Target: LUB");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [D U R' : [R' D R, U']]");
                        txtSolC.append("\nFull Solution: D U R' R' D R U' R' D' R U R U' D'");
                        break;
                    case "F":
                        txtSolC.append("\nSecond Target: LUF");
                        txtSolC.append("\nThis cycle is LUF/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [F, l U2 l']");
                        txtSolC.append("\nFull Solution: F l U2 l' F' l U2' l'");
                        break;
                    case "G":
                        txtSolC.append("\nSecond Target: LDF");
                        txtSolC.append("\nThis cycle is D-Side/D-Side.");
                        txtSolC.append("\n\nCycle: [U D2 : [R U' R', D']]");
                        txtSolC.append("\nFull Solution: U D2 R U' R' D' R U R' D D2' U'");
                        break;
                    case "H":
                        txtSolC.append("\nSecond Target: LDB");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "I":
                        txtSolC.append("\nSecond Target: FUL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [D R' D : [F2, D' R D R']]");
                        txtSolC.append("\nFull Solution: D R' D F2 D' R D R' F2' R D' R' D D' R D'");
                        break;
                    case "K":
                        txtSolC.append("\nSecond Target: FDR");
                        txtSolC.append("\nThis cycle is D-Side/D-Side.");
                        txtSolC.append("\n\nCycle: [U : [D2, R U' R']]");
                        txtSolC.append("\nFull Solution: U D2 R U' R' D2' R U R' U'");
                        break;
                    case "L":
                        txtSolC.append("\nSecond Target: FDL");
                        txtSolC.append("\nThis cycle is D-Side/D-Side.");
                        txtSolC.append("\n\nCycle: [D' R D : [R' U' R, D2]]");
                        txtSolC.append("\nFull Solution: D' R D R' U' R D2 R' U R D2' D' R' D");
                        break;
                    case "N":
                        txtSolC.append("\nSecond Target: RUB");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [U' R' U : [R D' R', U2]]");
                        txtSolC.append("\nFull Solution: U' R' U R D' R' U2 R D R' U2' U' R U");
                        break;
                    case "O":
                        txtSolC.append("\nSecond Target: RDB");
                        txtSolC.append("\nThis cycle is D-Side/D-Side.");
                        txtSolC.append("\n\nCycle: [U' : [D', R' U' R]]");
                        txtSolC.append("\nFull Solution: U' D' R' U' R D R' U R U");
                        break;
                    case "P":
                        txtSolC.append("\nSecond Target: RDF");
                        txtSolC.append("\nThis cycle is D-Side/D-Side.");
                        txtSolC.append("\n\nCycle: [U R' D' : [D', R U' R']]");
                        txtSolC.append("\nFull Solution: U R' D' D' R U' R' D R U R' D R U'");
                        break;
                    case "Q":
                        txtSolC.append("\nSecond Target: BUR");
                        txtSolC.append("\nThis cycle is BUR/D-Any.");
                        txtSolC.append("\n\nCycle: [D R' U : [R U' R', D]]");
                        txtSolC.append("\nFull Solution: D R' U R U' R' D R U R' D' U' R D'");
                        break;
                    case "R":
                        txtSolC.append("\nSecond Target: BUL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [U' R' U2 : [R D' R', U]]");
                        txtSolC.append("\nFull Solution: U' R' U2 R D' R' U R D R' U' U2' R U");
                        break;
                    case "S":
                        txtSolC.append("\nSecond Target: BDL");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "T":
                        txtSolC.append("\nSecond Target: BDR");
                        txtSolC.append("\nThis cycle is D-Side/D-Side - Special");
                        txtSolC.append("\n\nCycle: [D2' R' : [F', R D' R' D]]");
                        txtSolC.append("\nFull Solution: D2' R' F' R D' R' D F D' R D R' R D2");
                        break;
                    case "U":
                        txtSolC.append("\nSecond Target: DFL");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom.");
                        txtSolC.append("\n\nCycle: [U' D' R' D' : [U', R D R']]");
                        txtSolC.append("\nFull Solution: U' D' R' D' U' R D R' U R D' R' D R D U");
                        break;
                    case "V":
                        txtSolC.append("\nSecond Target: DFR");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom.");
                        txtSolC.append("\n\nCycle: [U' D' R' : [R' D R, U]]");
                        txtSolC.append("\nFull Solution: U' D' R' R' D R U R' D' R U' R D U");
                        break;
                    case "W":
                        txtSolC.append("\nSecond Target: DBR");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom.");
                        txtSolC.append("\n\nCycle: [U R : [D2, R U' R']]");
                        txtSolC.append("\nFull Solution: U R D2 R U' R' D2' R U R' R' U");
                        break;
                    case "X":
                        txtSolC.append("\nSecond Target: DBL");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    default:
                        txtSolC.append("\nError. Second Target Entered is Buffer Piece.");
                        break;
                }
                break;
            case "T": 
                txtSolC.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolC.setText("");
                txtSolC.append("\nFirst Target: BDR");
                switch (target2) {
                    case "A":
                        txtSolC.append("\nSecondTarget: UBR");
                        txtSolC.append("\nThis cycle is U-Top/D-Side.");
                        txtSolC.append("\n\nCycle: [U D : [R D', R', U2]]");
                        txtSolC.append("\nFull Solution: U D R D' R' U2 R D R' U2' D' U'");
                        break;
                    case "B":
                        txtSolC.append("\nSecondTarget: UBL");
                        txtSolC.append("\nThis cycle is U-Top/D-Side.");
                        txtSolC.append("\n\nCycle: [D : [R D' R', U']]");
                        txtSolC.append("\nFull Solution: D R D' R' U' R D R' U D'");
                        break;
                    case "D":
                        txtSolC.append("\nSecondTarget: UFL");
                        txtSolC.append("\nThis cycle is U-Top/D-Side.");
                        txtSolC.append("\n\nCycle: [D' : [U', R' D' R]]");
                        txtSolC.append("\nFull Solution: D' U' R' D' R U R' D R D");
                        break;
                    case "E":
                        txtSolC.append("\nSecondTarget: LUB");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [R U2 : [R' D' R, U']]");
                        txtSolC.append("\nFull Solution: R U2 R' D' R U' R' D R U U2' R'");
                        break;
                    case "F":
                        txtSolC.append("\nSecondTarget: LUF");
                        txtSolC.append("\nThis cycle is LUF/D-Any.");
                        txtSolC.append("\n\nCycle: [D' R' U' : [R U R', D']]");
                        txtSolC.append("\nFull Solution: D' R' U' R U R' D' R U' R' D U R D");
                        break;
                    case "G":
                        txtSolC.append("\nSecondTarget: LDF");
                        txtSolC.append("\nThis cycle is D-Side/D-Side - Special.");
                        txtSolC.append("\n\nCycle: [R' D R2 : [U, R' D' R]]");
                        txtSolC.append("\nFull Solution: R' D R2 U R' D' R U' R' D R R2' D' R");
                        break;
                    case "H":
                        txtSolC.append("\nSecondTarget: LDB");
                        txtSolC.append("\nThis cycle is D-Side/D-Side.");
                        txtSolC.append("\n\nCycle: [D' : [R U R', D']]");
                        txtSolC.append("\nFull Solution: D' R U R' D' R U' R' D D");
                        break;
                    case "I":
                        txtSolC.append("\nSecondTarget: FUL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [R U' : [R' D' R, U2]]");
                        txtSolC.append("\nFull Solution: R U' R' D' R U2 R' D R U2' U R'");
                        break;
                    case "K":
                        txtSolC.append("\nSecondTarget: FDR");
                        txtSolC.append("\nThis cycle is D-Side/D-Side - Special.");
                        txtSolC.append("\n\nCycle: [R U R' U' : [R U R', D']]");
                        txtSolC.append("\nFull Solution: R U R' U' R U R' D' R U' R' D U R U' R'");
                        break;
                    case "L":
                        txtSolC.append("\nSecondTarget: FDL");
                        txtSolC.append("\nThis cycle is D-Side/D-Side.");
                        txtSolC.append("\n\nCycle: [D' : [R U R', D2]]");
                        txtSolC.append("\nFull Solution: R U R' D2 R U' R' D2'");
                        break;
                    case "N":
                        txtSolC.append("\nSecondTarget: RUB");
                        txtSolC.append("\nThis cycle is U-Side/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [R' F' R D' U' : [R' D R, U2]]");
                        txtSolC.append("\nFull Solution: R' F' R D' U' R' D R U2 R' D' R U2' U D R' F R");
                        break;
                    case "O":
                        txtSolC.append("\nSecondTarget: RDB");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "P":
                        txtSolC.append("\nSecondTarget: RDF");
                        txtSolC.append("\nThis cycle is D-Side/D-Side.");
                        txtSolC.append("\n\nCycle: [D', R U R']");
                        txtSolC.append("\nFull Solution: D' R U R' D R U' R'");
                        break;
                    case "Q":
                        txtSolC.append("\nSecondTarget: BUR");
                        txtSolC.append("\nThis cycle is BUR/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [R U' : [D, R' U R]]");
                        txtSolC.append("\nFull Solution: R U' D R' U R D' R' U' R U R'");
                        break;
                    case "R":
                        txtSolC.append("\nSecondTarget: BUL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [D' R' : [D, R' U R]]");
                        txtSolC.append("\nFull Solution: D' R' D R' U R D' R' U' R R D");
                        break;
                    case "S":
                        txtSolC.append("\nSecondTarget: BDL");
                        txtSolC.append("\nThis cycle is D-Side/D-Side - Special");
                        txtSolC.append("\n\nCycle: [D R' D : [F', D' R D R']]");
                        txtSolC.append("\nFull Solution: D R' D F' D' R D R' F R D' R' D D' R D'");
                        break;
                    case "T":
                        txtSolC.append("\nSecondTarget: BDR");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "U":
                        txtSolC.append("\nSecondTarget: DFL");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom.");
                        txtSolC.append("\n\nCycle: [D' R : [R D' R', U']]");
                        txtSolC.append("\nFull Solution: D' R R D' R' U' R D R' U R' D");
                        break;
                    case "V":
                        txtSolC.append("\nSecondTarget: DFR");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom.");
                        txtSolC.append("\n\nCycle: [D' R D : [U, R' D' R]]");
                        txtSolC.append("\nFull Solution: D' R D U R' D' R U' R' D R D' R' D");
                        break;
                    case "W":
                        txtSolC.append("\nSecondTarget: DBR");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "X":
                        txtSolC.append("\nSecondTarget: DBL");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom.");
                        txtSolC.append("\n\nCycle: [R U' D : [R' U R, D2]]");
                        txtSolC.append("\nFull Solution: R U' D R' U R D2 R' U' R D2' D' U R'");
                        break;
                    default:
                        txtSolC.append("\nError. SecondTarget Entered is Buffer Piece.");
                        break;
                }
                break;
            case "U":
                txtSolC.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolC.setText("");
                txtSolC.append("\nFirst Target: DFL");
                switch (target2) {
                    case "A":
                        txtSolC.append("\nSecond Target: UBL");
                        txtSolC.append("\nThis cycle is U-Top/D-Bottom.");
                        txtSolC.append("\n\nCycle: [R F' R' U : [R D R', U2]]");
                        txtSolC.append("\nFull Solution: R F' R' U R D R' U2 R D' R' U2' U' R F R'");
                        break;
                    case "B":
                        txtSolC.append("\nSecond Target: UBR");
                        txtSolC.append("\nThis cycle is U-Top/D-Bottom.");
                        txtSolC.append("\n\nCycle: [R F' : [D, R' U' R]]");
                        txtSolC.append("\nFull Solution: R F' D R' U' R D' R' U R F R'");
                        break;
                    case "D":
                        txtSolC.append("\nSecond Target: UFL");
                        txtSolC.append("\nThis cycle is U-Top/D-Bottom - Special.");
                        txtSolC.append("\n\nCycle: [U' : [F2', U R' U' R]]");
                        txtSolC.append("\nFull Solution: U' F2' U R' U' R F2 R' U R U' U");
                        break;
                    case "E":
                        txtSolC.append("\nSecond Target: LUB");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [D' R : [U, R D' R']]");
                        txtSolC.append("\nFull Solution: D' R U R D' R' U' R D R' R' D");
                        break;
                    case "F":
                        txtSolC.append("\nSecond Target: LUF");
                        txtSolC.append("\nThis cycle is LUF/D-Any.");
                        txtSolC.append("\n\nCycle: [U' R' U : [D, R U' R']]");
                        txtSolC.append("\nFull Solution: U' R' U D R U' R' D' R U R' U' R U");
                        break;
                    case "G":
                        txtSolC.append("\nSecond Target: LDF");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "H":
                        txtSolC.append("\nSecond Target: LDB");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom - Special.");
                        txtSolC.append("\n\nCycle: [D R U' R' : [U2, R' D R]]");
                        txtSolC.append("\nFull Solution: D R U' R' U2 R' D R U2' R' D' R R U R' D'");
                        break;
                    case "I":
                        txtSolC.append("\nSecond Target: FUL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [R D U' : [R' D' R, U2]]");
                        txtSolC.append("\nFull Solution: R D U' R' D' R U2 R' D R U2' U D' R'");
                        break;
                    case "K":
                        txtSolC.append("\nSecond Target: FDR");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom - Special.");
                        txtSolC.append("\n\nCycle: [R : [F2, R' U R U']]");
                        txtSolC.append("\nFull Solution: R F2 R' U R U' F2' U R' U' R R'");
                        break;
                    case "L":
                        txtSolC.append("\nSecond Target: FDL");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "N":
                        txtSolC.append("\nSecond Target: RUB");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [U' R' : [U2, R' D R]]");
                        txtSolC.append("\nFull Solution: U' R' U2 R' D R U2' R' D' R R U");
                        break;
                    case "O":
                        txtSolC.append("\nSecond Target: RDB");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom.");
                        txtSolC.append("\n\nCycle: [U' R' : [U, R' D R]]");
                        txtSolC.append("\nFull Solution: U' R' U R' D R U' R' D' R R U");
                        break;
                    case "P":
                        txtSolC.append("\nSecond Target: RDF");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom.");
                        txtSolC.append("\n\nCycle: [R D : [R' D' R, U]]");
                        txtSolC.append("\nFull Solution: R D R' D' R U R' D R U' D' R'");
                        break;
                    case "Q":
                        txtSolC.append("\nSecond Target: BUR");
                        txtSolC.append("\nThis cycle is BUR/D-Any.");
                        txtSolC.append("\n\nCycle: [D' R U' : [D', R' U R]]");
                        txtSolC.append("\nFull Solution: D' R U' D' R' U R D R' U' R U R' D");
                        break;
                    case "R":
                        txtSolC.append("\nSecond Target: BUL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [U' R' : [U', R' D R]]");
                        txtSolC.append("\nFull Solution: U' R' U' R' D R U R' D' R R U");
                        break;
                    case "S":
                        txtSolC.append("\nSecond Target: BDL");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom.");
                        txtSolC.append("\n\nCycle: [U' D' R' D' : [R D R', U']]");
                        txtSolC.append("\nFull Solution: U' D' R' D' R D R' U' R D' R' U D R D U");
                        break;
                    case "T":
                        txtSolC.append("\nSecond Target: BDR");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom.");
                        txtSolC.append("\n\nCycle: [D' R : [U', R D' R']]");
                        txtSolC.append("\nFull Solution: D' R U' R D' R' U R D R' R' D");
                        break;
                    case "U":
                        txtSolC.append("\nSecond Target: DFL");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "V":
                        txtSolC.append("\nSecond Target: DFR");
                        txtSolC.append("\nThis cycle is D-Bottom/D-Bottom.");
                        txtSolC.append("\n\nCycle: [U' R' U R : [D, R U' R']]");
                        txtSolC.append("\nFull Solution: U' R' U R D R U' R' D' R U R' R' U' R U");
                        break;
                    case "W":
                        txtSolC.append("\nSecond Target: DBR");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "X":
                        txtSolC.append("\nSecond Target: DBR");
                        txtSolC.append("\nThis cycle is D-Bottom/D-Bottom.");
                        txtSolC.append("\n\nCycle: [R U' D2 : [R' U R, D]]");
                        txtSolC.append("\nFull Solution: R U' D2 R' U R D R' U' R D' D2' U R'");
                        break;
                    default:
                        txtSolC.append("Error. \nSecond Target Entered is Buffer Piece.");
                        break;
                }
                break;
            case "V":
                txtSolC.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolC.setText("");
                txtSolC.append("\nFirst Target: DFR");
                switch (target2) {
                    case "A":
                        txtSolC.append("\nSecond Target: UBL");
                        txtSolC.append("\nThis cycle is U-Top/D-Bottom - Special.");
                        txtSolC.append("\n\nCycle: [U2, R' D R U' R D' R']");
                        txtSolC.append("\nFull Solution: U2 R' D R U' R D' R' U2' R D R' U R' D' R");
                        break;
                    case "B":
                        txtSolC.append("\nSecond Target: UBR");
                        txtSolC.append("\nThis cycle is U-Top/D-Bottom - Special.");
                        txtSolC.append("\n\nCycle: [U, R' D R U' R D' R']");
                        txtSolC.append("\nFull Solution: U R' D R U' R D' R' U' R D R' U R' D' R");
                        break;
                    case "D":
                        txtSolC.append("\nSecond Target: UFL");
                        txtSolC.append("\nThis cycle is U-Top/D-Bottom - Special.");
                        txtSolC.append("\n\nCycle: [U', R' D R U' R D' R']");
                        txtSolC.append("\nFull Solution: U' R' D R U' R D' R' U R D R' U R' D' R");
                        break;
                    case "E":
                        txtSolC.append("\nSecond Target: LUB");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [U R' D' : [R' D' R, U']]");
                        txtSolC.append("\nFull Solution: U R' D' R' D' R U' R' D R U D R U'");
                        break;
                    case "F":
                        txtSolC.append("\nSecond Target: LUF");
                        txtSolC.append("\nThis cycle is LUF/D-Any.");
                        txtSolC.append("\n\nCycle: [U' D' R' U : [D, R U' R']]");
                        txtSolC.append("\nFull Solution: U' D' R' U D R U' R' D' R U R' U' R D U");
                        break;
                    case "G":
                        txtSolC.append("\nSecond Target: LDF");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom.");
                        txtSolC.append("\n\nCycle: [U D R D' : [R' D R, U']]");
                        txtSolC.append("\nFull Solution: U D R D' R' D R U' R' D' R U D R' D' U'");
                        break;
                    case "H":
                        txtSolC.append("\nSecond Target: LDB");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom - Special.");
                        txtSolC.append("\n\nCycle: [R U' D R' : [U2, R' D R]]");
                        txtSolC.append("\nFull Solution: R U' D R' U2 R' D R U2' R' D' R R D' U R'");
                        break;
                    case "I":
                        txtSolC.append("\nSecond Target: FUL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [R U' R' U D : [R D R', U2]]");
                        txtSolC.append("\nFull Solution: R U' R' U D R D R' U2 R D' R' U2' D' U' R U R'");
                        break;
                    case "K":
                        txtSolC.append("\nSecond Target: FDR");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "L":
                        txtSolC.append("\nSecond Target: FDL");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom - Special.");
                        txtSolC.append("\n\nCycle: [R U' R' : [U2, R' D R]]");
                        txtSolC.append("\nFull Solution: R U' R' U2 R' D R U2' R' D' R R U R'");
                        break;
                    case "N":
                        txtSolC.append("\nSecond Target: RUB");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [U' D' R' : [U2, R' D R]]");
                        txtSolC.append("\nFull Solution: U' D' R' U2 R' D R U2' R' D' R R D U");
                        break;
                    case "O":
                        txtSolC.append("\nSecond Target: RDB");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom - Special.");
                        txtSolC.append("\n\nCycle: [D' R : [F2, R' U R U']]");
                        txtSolC.append("\nFull Solution: D' R F2 R' U R U' F2' U R' U' R R' D");
                        break;
                    case "P":
                        txtSolC.append("\nSecond Target: RDF");
                        txtSolC.append("\nThis cycle cannot be done. ");
                        break;
                    case "Q":
                        txtSolC.append("\nSecond Target: BUR");
                        txtSolC.append("\nThis cycle is BUR/D-Any.");
                        txtSolC.append("\n\nCycle: [U R' U' : [D', R U R']]");
                        txtSolC.append("\nFull Solution: U R' U' D' R U R' D R U' R' U R U'");
                        break;
                    case "R":
                        txtSolC.append("\nSecond Target: BUL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [D' U' R' : [U', R' D R]]");
                        txtSolC.append("\nFull Solution: D' U' R' U' R' D R U R' D' R R U D");
                        break;
                    case "S":
                        txtSolC.append("\nSecond Target: BDL");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom.");
                        txtSolC.append("\n\nCycle: [U' D' R' : [U, R' D R]]");
                        txtSolC.append("\nFull Solution: U' D' R' U R' D R U' R' D' R R D U");
                        break;
                    case "T":
                        txtSolC.append("\nSecond Target: BDR");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom.");
                        txtSolC.append("\n\nCycle: [D' R D : [R' D' R, U]]");
                        txtSolC.append("\nFull Solution: D' R D R' D' R U R' D R U' D' R' D");
                        break;
                    case "U":
                        txtSolC.append("\nSecond Target: DFL");
                        txtSolC.append("\nThis cycle is D-Bottom/D-Bottom.");
                        txtSolC.append("\n\nCycle: [U' R' U R : [R U' R', D]]");
                        txtSolC.append("\nFull Solution: U' R' U R R U' R' D R U R' D' R' U' R U");
                        break;
                    case "V":
                        txtSolC.append("\nSecond Target: DFR");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "W":
                        txtSolC.append("\nSecond Target: DBR");
                        txtSolC.append("\nThis cycle is D-Bottom/D-Bottom.");
                        txtSolC.append("\n\nCycle: [D R U' R' : [R' U R, D']]");
                        txtSolC.append("\nFull Solution: D R U' R' R' U R D' R' U' R D R U R' D'");
                        break;
                    case "X":
                        txtSolC.append("\nSecond Target: DBL");
                        txtSolC.append("\nThis cycle is D-Bottom/D-Bottom.");
                        txtSolC.append("\n\nCycle: [R U' R' U : [R D' R', U2]]");
                        txtSolC.append("\nFull Solution: R U' R' U R D' R' U2 R D R' U2' U' R U R'");
                        break;
                    default:
                        txtSolC.append("Error. \nSecond Target Entered is Buffer Piece.");
                        break;
                }
                break;
            case "W":
                txtSolC.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolC.setText("");
                txtSolC.append("\nFirst Target: DBR");
                switch (target2) {
                    case "A":
                        txtSolC.append("\nSecond Target: UBL");
                        txtSolC.append("\nThis cycle is U-Top/D-Bottom.");
                        txtSolC.append("\n\nCycle: [R D' R' : [U2, R' D R]]");
                        txtSolC.append("\nFull Solution: R D' R' U2 R' D R U2 R' D' R R D R'");
                        break;
                    case "B":
                        txtSolC.append("\nSecond Target: UBR");
                        txtSolC.append("\nThis cycle is U-Top/D-Bottom - Special.");
                        txtSolC.append("\n\nCycle: [R D' R' U R' D R, U']");
                        txtSolC.append("\nFull Solution: R D' R' U R' D R U' R' D' R U' R D R' U");
                        break;
                    case "D":
                        txtSolC.append("\nSecond Target: UFL");
                        txtSolC.append("\nThis cycle is U-Top/D-Bottom.");
                        txtSolC.append("\n\nCycle: [R D' R' : [U', R' D R]]");
                        txtSolC.append("\nFull Solution: R D' R' U' R' D R U R' D' R R D R'");
                        break;
                    case "E":
                        txtSolC.append("\nSecond Target: LUB");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [D R : [U, R D' R']]");
                        txtSolC.append("\nFull Solution: D R U R D' R' U' R D R' R' D'");
                        break;
                    case "F":
                        txtSolC.append("\nSecond Target: LUF");
                        txtSolC.append("\nThis cycle is LUF-/D-Any.");
                        txtSolC.append("\n\nCycle: [R U' R2' : [U, R D R']]");
                        txtSolC.append("\nFull Solution: R U' R2' U R D R' U' R D' R' R2 U R'");
                        break;
                    case "G":
                        txtSolC.append("\nSecond Target: LDF");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom.");
                        txtSolC.append("\n\nCycle: [U R2 : [U', R' D R]]");
                        txtSolC.append("\nFull Solution: U R2 U' R' D R U R' D' R R2' U'");
                        break;
                    case "H":
                        txtSolC.append("\nSecond Target: LDB");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom - Special.");
                        txtSolC.append("\n\nCycle: [R D' R' : [U, R' D R]]");
                        txtSolC.append("\nFull Solution: R D' R' U R' D R U' R' D' R R D R'");
                        break;
                    case "I":
                        txtSolC.append("\nSecond Target: FUL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [D R : [U2, R D' R']]");
                        txtSolC.append("\nFull Solution: D R U2 R D' R' U2' R D R' R' D'");
                        break;
                    case "K":
                        txtSolC.append("\nSecond Target: FDR");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom.");
                        txtSolC.append("\n\nCycle: [U R D' : [R' D R, U']]");
                        txtSolC.append("\nFull Solution: U R D' R' D R U' R' D' R U D R' U'");
                        break;
                    case "L":
                        txtSolC.append("\nSecond Target: FDL");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom.");
                        txtSolC.append("\n\nCycle: [D' R2 : [R' U' R, D']]");
                        txtSolC.append("\nFull Solution: D' R2 R' U' R D' R' U R D R2' D");
                        break;
                    case "N":
                        txtSolC.append("\nSecond Target: RUB");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [U R U D' : [R' D R, U2]]");
                        txtSolC.append("\nFull Solution: U R U D' R' D R U2 R' D' R U2' D U' R' U");
                        break;
                    case "O":
                        txtSolC.append("\nSecond Target: RDB");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "P":
                        txtSolC.append("\nSecond Target: RDF");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom - Special.");
                        txtSolC.append("\n\nCycle: [D' R U' R' : [U2, R' D R]]");
                        txtSolC.append("\nFull Solution: D' R U' R' U2 R' D R U2' R' D' R R U R' D");
                        break;
                    case "Q":
                        txtSolC.append("\nSecond Target: BUR");
                        txtSolC.append("\nThis cycle is BUR/D-Any.");
                        txtSolC.append("\n\nCycle: [D R U' : [D', R' U R]]");
                        txtSolC.append("\nFull Solution: D R U' D' R' U R D R' U' R U R' D'");
                        break;
                    case "R":
                        txtSolC.append("\nSecond Target: BUL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [U R2 : [U', R' D' R]]");
                        txtSolC.append("\nFull Solution: U R2 U' R' D' R U R' D R R2' U'");
                        break;
                    case "S":
                        txtSolC.append("\nSecond Target: BDL");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom.");
                        txtSolC.append("\n\nCycle: [U R2 : [U', R' D2 R]]");
                        txtSolC.append("\nFull Solution: U R2 U' R' D2 R U R' D2' R R2' U'");
                        break;
                    case "T":
                        txtSolC.append("\nSecond Target: BDR");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "U":
                        txtSolC.append("\nSecond Target: DFL");
                        txtSolC.append("\nThis cycle is D-Bottom/D-Bottom.");
                        txtSolC.append("\n\nCycle: [U' R2' : [D, R2 U R2' U' R2]]");
                        txtSolC.append("\nFull Solution: U' R2' D R2 U R2' U' R2 D' R2' U R2");
                        break;
                    case "V":
                        txtSolC.append("\nSecond Target: DFR");
                        txtSolC.append("\nThis cycle is D-Bottom/D-Bottom.");
                        txtSolC.append("\n\nCycle: [D R U' R' : [D', R' U R]]");
                        txtSolC.append("\nFull Solution: D R U' R' D' R' U R D R' U' R R U R' D'");
                        break;
                    case "W":
                        txtSolC.append("\nSecond Target: DBR");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "X":
                        txtSolC.append("\nSecond Target: DBL");
                        txtSolC.append("\nThis cycle is D-Bottom/D-Bottom.");
                        txtSolC.append("\n\nCycle: [R U' R' : [R' U R, D']]");
                        txtSolC.append("\nFull Solution: R U' R' R' U R D' R' U' R' D R U R'");
                        break;
                    default:
                        txtSolC.append("\nError. \nSecond Target Entered is Buffer Piece.");
                        break;
                }
                break;
            case "X": 
                txtSolC.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolC.setText("");
                txtSolC.append("First Target: DBL");
                switch (target2) {
                    case "A":
                        txtSolC.append("\nSecond Target: UBL");
                        txtSolC.append("\nThis cycle is U-Top/D-Bottom - Special.");
                        txtSolC.append("\n\nCycle: [R' U' D' R : [D, R U' R']]");
                        txtSolC.append("\nFull Solution: R' U' D' R D R U' R' D' R U R' R' D U R");
                        break;
                    case "B":
                        txtSolC.append("\nSecond Target: UBR");
                        txtSolC.append("\nThis cycle is U-Top/D-Bottom.");
                        txtSolC.append("\n\nCycle: [R' B : [R U R', D']]");
                        txtSolC.append("\nFull Solution: R' B R U R' D' R U' R' D B' R");
                        break;
                    case "D":
                        txtSolC.append("\nSecond Target: UFL");
                        txtSolC.append("\nThis cycle is U-Top/D-Bottom - Special.");
                        txtSolC.append("\n\nCycle: [R' D' R : [D ,R U' R']]");
                        txtSolC.append("\nFull Solution: R' D' R D R U' R' D' R U R' R' D R");
                        break;
                    case "E":
                        txtSolC.append("\nSecond Target: LUB");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [R : [U, R D' R']]");
                        txtSolC.append("\nFull Solution: R U R D' R' U' R D R' R'");
                        break;
                    case "F":
                        txtSolC.append("\nSecond Target: LUF");
                        txtSolC.append("\nThis cycle is LUF/D-Any.");
                        txtSolC.append("\n\nCycle: [U' D R' U : [D, R U' R']]");
                        txtSolC.append("\nFull Solution: U' D R' U D R U' R' D' R U R' U' R D' U");
                        break;
                    case "G":
                        txtSolC.append("\nSecond Target: LDF");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom - Special.");
                        txtSolC.append("\n\nCycle: [D R : [F2, R' U R U']]");
                        txtSolC.append("\nFull Solution: D R F2 R' U R U' F2' U R' U' R R' D'");
                        break;
                    case "H":
                        txtSolC.append("\nSecond Target: LDB");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "I":
                        txtSolC.append("\nSecond Target: FUL");
                        txtSolC.append("\nThis cycle is U-Side/D-Bottom.");
                        txtSolC.append("\n\nCycle: [R2 U : [R' U R, D']]");
                        txtSolC.append("\nFull Solution: R2 U R' U R D' R' U' R D U' R2'");
                        break;
                    case "K":
                        txtSolC.append("\nSecond Target: FDR");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom - Special.");
                        txtSolC.append("\n\nCycle: [R' D' R : [D, R U R']]");
                        txtSolC.append("\nFull Solution: R' D' R D R U R' D' R U' R' R' D R");
                        break;
                    case "L":
                        txtSolC.append("\nSecond Target: FDL");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom.");
                        txtSolC.append("\n\nCycle: [D R D : [R' D' R, U]]");
                        txtSolC.append("\nFull Solution: D R D R' D' R U R' D R U' D' R' D'");
                        break;
                    case "N":
                        txtSolC.append("\nSecond Target: RUB");
                        txtSolC.append("\nThis cycle is U-Side/D-Any.");
                        txtSolC.append("\n\nCycle: [D U' R' : [U2, R' D R]]");
                        txtSolC.append("\nFull Solution: D U' R' U2 R' D R U2' R' D' R R U D'");
                        break;
                    case "O":
                        txtSolC.append("\nSecond Target: RDB");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom.");
                        txtSolC.append("\n\nCycle: [U D' R D' : [R' D R, U']]");
                        txtSolC.append("\nFull Solution: U D' R D' R' D R U' R' D' R U D R' D U'");
                        break;
                    case "P":
                        txtSolC.append("\nSecond Target: RDF");
                        txtSolC.append("\nThis cycle isD-Side/D-Bottom. ");
                        txtSolC.append("\n\nCycle: [R2 : [R' U' R, D']]");
                        txtSolC.append("\nFull Solution: R2 R' U' R D' R' U R D R2'");
                        break;
                    case "Q":
                        txtSolC.append("\nSecond Target: BUR");
                        txtSolC.append("\nThis cycle is BUR/D-Any.");
                        txtSolC.append("\n\nCycle: [R U' : [D', R' U R]]");
                        txtSolC.append("\nFull Solution: R U' D' R' U R D R' U' R U R'");
                        break;
                    case "R":
                        txtSolC.append("\nSecond Target: BUL");
                        txtSolC.append("\nThis cycle is U-Side/D-Any - Special.");
                        txtSolC.append("\n\nCycle: [R2 U : [R' U' R, D']]");
                        txtSolC.append("\nFull Solution: R2 U R' U' R D' R' U R D U' R2'");
                        break;
                    case "S":
                        txtSolC.append("\nSecond Target: BDL");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    case "T":
                        txtSolC.append("\nSecond Target: BDR");
                        txtSolC.append("\nThis cycle is D-Side/D-Bottom.");
                        txtSolC.append("\n\nCycle: [R U' D' : [R' U R, D2]]");
                        txtSolC.append("\nFull Solution: R U' D' R' U R D2 R' U' R D2' D U R'");
                        break;
                    case "U":
                        txtSolC.append("\nSecond Target: DFL");
                        txtSolC.append("\nThis cycle is D-Bottom/D-Bottom.");
                        txtSolC.append("\n\nCycle: [R U' D' : [R' U R, D']]");
                        txtSolC.append("\nFull Solution: R U' D' R' U R D' R' U' R D D U R'");
                        break;
                    case "V":
                        txtSolC.append("\nSecond Target: DFR");
                        txtSolC.append("\nThis cycle is D-Bottom/D-Bottom.");
                        txtSolC.append("\n\nCycle: [R U' R' U' : [R D' R', U2]]");
                        txtSolC.append("\nFull Solution: R U' R' U' R D' R' U2 R D R' U2' U R U R'");
                        break;
                    case "W":
                        txtSolC.append("\nSecond Target: DBR");
                        txtSolC.append("\nThis cycle is D-Bottom/D-Bottom.");
                        txtSolC.append("\n\nCycle: [R U' R' : [D', R' U R]]");
                        txtSolC.append("\nFull Solution: R U' R' D' R' U R D R' U' R R U R'");
                        break;
                    case "X":
                        txtSolC.append("\nSecond Target: DBL");
                        txtSolC.append("\nThis cycle cannot be done.");
                        break;
                    default:
                        txtSolC.append("\nError. \nSecond Target Entered is Buffer Piece.");
                        break;
                }
                break;
            default:
                System.out.println("\nError. Second Target Entered is not valid.");
        } 
        // ST JX MO RG
    }                                         

    private void txtTarget4ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void txtTarget3ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void btnCycleActionPerformed(java.awt.event.ActionEvent evt) {                                         
        btnCycle.setFont(new Font("Courier", Font.BOLD, 30));
        String target1 = txtTarget1.getText();
        String target2 = txtTarget2.getText();

        target1 = target1.toUpperCase();
        target2 = target2.toUpperCase();

        switch (target1) {
            case "A":
                txtSolution.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolution.setText("");
                txtSolution.append("First Target: BU");
                switch (target2) {
                    case "A":
                        txtSolution.append("\nSecond Target: UB");
                        txtSolution.append("\nThis cycle cannot be done");
                        break;
                    case "B":
                        txtSolution.append("\nSecond Target: UR");
                        txtSolution.append("\nThis cycle is a 4-mover. ");
                        txtSolution.append("\n\nSolution: [R2 U' : [S, R2']]");
                        txtSolution.append("\nOr: R2 U' S R2' S' R2 U R2");
                        break;
                    case "D":
                        txtSolution.append("\nSecond Target: UL");
                        txtSolution.append("\nThis cycle is a 4-mover.");
                        txtSolution.append("\n\nSolution: [L2' U : [S, L2]]");
                        txtSolution.append("\nOr: L2' U S L2 S' L2 U' L2");
                        break;
                    case "E":
                        txtSolution.append("\nSecond Target: LU");
                        txtSolution.append("\nThis cycle is a 4-mover.");
                        txtSolution.append("\n\nSolution: [U' M U' : [M', U2]]");
                        txtSolution.append("\nOr: U' M U' M' U2 M U2 U M' U");
                        break;
                    case "F":
                        txtSolution.append("\nSecond Target: LF");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U' : [R' E R, U2]]");
                        txtSolution.append("\nOr: U' R' E R U2 R' E' R U2 U");
                        break;
                    case "G":
                        txtSolution.append("\nSecond Target: LD");
                        txtSolution.append("\nThis cycle is a U-swap.");
                        txtSolution.append("\n\nSolution: [U : [L' E' L, U2']]");
                        txtSolution.append("\nOr: U L' E' L U2 L' E L U2");
                        break;
                    case "H":
                        txtSolution.append("\nSecond Target: LB");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U' : [R E' R', U2]]");
                        txtSolution.append("\nOr: U' R E' R' U2 R E R' U2");
                        break;
                    case "J":
                        txtSolution.append("\nSecond Target: FR");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R' U' : [S, R2']]");
                        txtSolution.append("\nOr: R' U' S R2' S' R2 U R");
                        break;
                    case "K":
                        txtSolution.append("\nSecond Target: FD");
                        txtSolution.append("\nThis cycle is an E-Swap");
                        txtSolution.append("\n\nSolution: [R' F' : [R U R', E]]");
                        txtSolution.append("\nOr: R' F' R U R' E R U' R' E' F R");
                        break;
                    case "L":
                        txtSolution.append("\nSecond Target: FL");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [L U : [S', L2']]");
                        txtSolution.append("\nOr: L U S' L2' S L2 U' L'");
                        break;
                    case "M":
                        txtSolution.append("\nSecond Target: RU");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U M U : [M', U2']]");
                        txtSolution.append("\nOr: U M U M' U2' M U2 U' M' U");
                        break;
                    case "N":
                        txtSolution.append("\nSecond Target: RB");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U' : [L' E L, U2']]");
                        txtSolution.append("\nOr: U' L' E L U2' L' E' L U2 U");
                        break;
                    case "O":
                        txtSolution.append("\nSecond Target: RD");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U' : [R E R', U2]]");
                        txtSolution.append("\nOr: U' R E R' U2 R E' R' U2 U");
                        break;
                    case "P":
                        txtSolution.append("\nSecond Target: RF");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U : [L E' L', U2']]");
                        txtSolution.append("\nOr: U L E' L' U2' L E' L' U2 U");
                        break;
                    case "Q":
                        txtSolution.append("\nSecond Target: BU");
                        txtSolution.append("\nThis cycle cannot be done.");
                        break;
                    case "R":
                        txtSolution.append("\nSecond Target: BL");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [L' U' : [L2, S']]");
                        txtSolution.append("\nOr: L' U' L2 S' L2' S U L ");
                        break;
                    case "S":
                        txtSolution.append("\nSecond Target: BD");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U' R' B R : [S R2']]");
                        txtSolution.append("\nOr: U' R' B R S R2' S' R2 R' B' R U");
                        break;
                    case "T":
                        txtSolution.append("\nSecond Target: BR");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R U : [R2', S]");
                        txtSolution.append("\nOr: R U R2' S R2 S' U' R'");
                        break;
                    case "U":
                        txtSolution.append("\nSecond Target: DF");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U2 M']");
                        txtSolution.append("\nOr: U2 M' U2' M ");
                        break;
                    case "V":
                        txtSolution.append("\nSecond Target: DR");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U' : [S, R2']]");
                        txtSolution.append("\nOr: U' S R2' S' R2 U");
                        break;
                    case "W":
                        txtSolution.append("\nSecond Target: DB");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [M, U2]");
                        txtSolution.append("\nOr: M U2 M' U2'");
                        break;
                    case "X":
                        txtSolution.append("\nSecond Target: DL");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U : [S', L2]]");
                        txtSolution.append("\nOr: U S' L2 S L2' U'");
                        break;
                }
                break;
            case "B":
                txtSolution.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolution.setText("");
                txtSolution.append("First Target: UR");
                switch (target2) {
                    case "A":
                        txtSolution.append("\nSecond Target: UB");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R2 U' : [R2', S]]");
                        txtSolution.append("\nOr: R2 U' R2' S R2 S' U R2'");
                        break;
                    case "B":
                        txtSolution.append("\nSecond Target: UR");
                        txtSolution.append("\nThis cycle cannot be done.");
                        break;
                    case "D":
                        txtSolution.append("\nSecond Target: UL");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [M2' U : [M, U2']]");
                        txtSolution.append("\nOr: M2' U M U2' M' U2 U' M2");
                        break;
                    case "E":
                        txtSolution.append("\nSecond Target: LU");
                        txtSolution.append("\nThis cycle is an S-Swap");
                        txtSolution.append("\n\nSolution: [S', L F' L']");
                        txtSolution.append("\nOr: S' L F' L' S L F L'");
                        break;
                    case "F":
                        txtSolution.append("\nSecond Target: LF");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U', R' E R]");
                        txtSolution.append("\nOr: U' R' E R U R' E' R");
                        break;
                    case "G":
                        txtSolution.append("\nSecond Target: LD");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U : [L' E' L, U]]");
                        txtSolution.append("\nOr: U L' E' L U L' E L U' U'");
                        break;
                    case "H":
                        txtSolution.append("\nSecond Target: LB");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U', R E' R']");
                        txtSolution.append("\nOr: U' R E' R' U R E R'");
                        break;
                    case "J":
                        txtSolution.append("\nSecond Target: FR");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [E' : [U', R' E R]]");
                        txtSolution.append("\nOr: E' U' R' E R U R' E' R E");
                        break;
                    case "K":
                        txtSolution.append("\nSecond Target: FD");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [r : [U' R' U, M]]");
                        txtSolution.append("\nOr: r U' R' U M U' R U M' r'");
                        break;
                    case "L":
                        txtSolution.append("\nSecond Target: FL");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U', R E2 R']");
                        txtSolution.append("\nOr: U' R E2 R' U R E2 R'");
                        break;
                    case "M":
                        txtSolution.append("\nSecond Target: RU");
                        txtSolution.append("\nThis cycle cannot be done.");
                        break;
                    case "N":
                        txtSolution.append("\nSecond Target: RB");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U : [L' E L, U]]");
                        txtSolution.append("\nOr: U L' E L U L' E' L U' U'");
                        break;
                    case "O":
                        txtSolution.append("\nSecond Target: RD");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U', R E R']");
                        txtSolution.append("\nOr: U' R E R' U R E' R'");
                        break;
                    case "P":
                        txtSolution.append("\nSecond Target: RF");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U : [L E' L', U]]");
                        txtSolution.append("\nOr: U L E' L' U L E L' U' U'");
                        break;
                    case "Q":
                        txtSolution.append("\nSecond Target: BU");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [r' : [U' R U, M']]");
                        txtSolution.append("\nOr: r' U' R U M' U' R' U M r");
                        break;
                    case "R":
                        txtSolution.append("\nSecond Target: BL");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U', R' E2 R]");
                        txtSolution.append("\nOr: U' R' E2 R U R' E2 R");
                        break;
                    case "S":
                        txtSolution.append("\nSecond Target: BD");
                        txtSolution.append("\nThis cycle is an algorithm.");
                        txtSolution.append("\n\nSolution: (U M U M')2");
                        txtSolution.append("\nOr: U M U M' U M U M'");
                        break;
                    case "T":
                        txtSolution.append("\nSecond Target: BR");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: u' : [R E' R', U]");
                        txtSolution.append("\nOr: u' R E' R' U R E R' U' u");
                        break;
                    case "U":
                        txtSolution.append("\nSecond Target: DF");
                        txtSolution.append("\nThis cycle is an F-Swap");
                        txtSolution.append("\n\nSolution: [L F : [L' S' L, F2]]");
                        txtSolution.append("\nOr: L F L' S' L F2 L' S L F2 F' L'");
                        break;
                    case "V":
                        txtSolution.append("\nSecond Target: DR");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R' U R' : [S, R2]]");
                        txtSolution.append("\nOr: R' U R' S R2 S' R2' R U' R");
                        break;
                    case "W":
                        txtSolution.append("\nSecond Target: DB");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [r M' : [U' R' U, M2']]");
                        txtSolution.append("\nOr: r M' U' R' U M2' U' R U M2 M r'");
                        break;
                    case "X":
                        txtSolution.append("\nSecond Target: DL");
                        txtSolution.append("\nThis cycle is an algorithm.");
                        txtSolution.append("\n\nSolution: U' L' U' L U L U L U' L'");
                        break;
                }
                break;
            case "D":
                txtSolution.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolution.setText("");
                txtSolution.append("First Target: UL");
                switch (target2) {
                    case "A":
                        txtSolution.append("\nSecond Target: UB");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [L2' U : [L2, S']]");
                        txtSolution.append("\nOr: L2' U L2 S' L2' S U' L2");
                        break;
                    case "B":
                        txtSolution.append("\nSecond Target: UR");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [M2' U' : [M, U2]]");
                        txtSolution.append("\nOr: M2' U' M U2 M' U2' U M2");
                        break;
                    case "D":
                        txtSolution.append("\nSecond Target: UL");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "E":
                        txtSolution.append("\nSecond Target LU");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "F":
                        txtSolution.append("\nSecond Target: LF");
                        txtSolution.append("\nThis cycle is a U-Swap");
                        txtSolution.append("\n\nSolution: [U' : [R' E R, U']]");
                        txtSolution.append("\nOr: U' R' E R U' R' E' R U U");
                        break;
                    case "G":
                        txtSolution.append("\nSecond Target: LD");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U, L' E' L]");
                        txtSolution.append("\nOr: U L' E' L U' L' E L");
                        break;
                    case "H":
                        txtSolution.append("\nSecond Target: LB");
                        txtSolution.append("\nThis cycle is a U-Swap");
                        txtSolution.append("\n\nSolution: [U' : [R E' R', U']]");
                        txtSolution.append("\nOr: U' R E' R' U' R E R' U U");
                        break;
                    case "J":
                        txtSolution.append("\nSecond Target: FR");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U, L' E2' L]");
                        txtSolution.append("\nOr: U L' E2' L U' L' E2 L");
                        break;
                    case "K":
                        txtSolution.append("\nSecond Target: FD");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [l' : [U L U', M]]");
                        txtSolution.append("\nOr: l' U L U' M U L' U' M' l");
                        break;
                    case "L":
                        txtSolution.append("\nSecond Target: FL");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U' : [R E2 R', U']");
                        txtSolution.append("\nOr: U' R E2 R' U' R E2 R' U U");
                        break;
                    case "M":
                        txtSolution.append("\nSecond Target: RU");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [S, R' F R]");
                        txtSolution.append("\nOr: S R' F R S' R' F' R");
                        break;
                    case "N":
                        txtSolution.append("\nSecond Target: RB");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U, L' E L]");
                        txtSolution.append("\nOr: U L' E L U' L' E' L");
                        break;
                    case "O":
                        txtSolution.append("\nSecond Target: RD");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U' : [R E R', U']]");
                        txtSolution.append("\nOr: U' R E R' U' R E' R' U U");
                        break;
                    case "P":
                        txtSolution.append("\nSecond Target: RF");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U, L E' L']");
                        txtSolution.append("\nOr: U L E' L' U' L E L'");
                        break;
                    case "Q":
                        txtSolution.append("\nSecond Target: BU");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [L : [M, U L' U']]");
                        txtSolution.append("\nOr: L M U L' U' M' U L U' L'");
                        break;
                    case "R":
                        txtSolution.append("\nSecond Target: BL");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U' : [R E2 R', U']]");
                        txtSolution.append("\nOr: U' R E2 R' U' R E2 R' U U");
                        break;
                    case "S":
                        txtSolution.append("\nSecond Target: BD");
                        txtSolution.append("\nThis cycle is an algorithm.");
                        txtSolution.append("\n\nSolution: (U' M U' M')2");
                        txtSolution.append("\nOr: U' M U' M' U' M U' M'");
                        break;
                    case "T":
                        txtSolution.append("\nSecond Target: BR");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U, L E2' L']");
                        txtSolution.append("\nOr: U L E2' L' U' L E2' L'");
                        break;
                    case "U":
                        txtSolution.append("\nSecond Target: DF");
                        txtSolution.append("\nThis cycle is an F-Swap.");
                        txtSolution.append("\n\nSolution: [R' F' : [R S R', F2]]");
                        txtSolution.append("\nOr: R' F' R S R' F2 R S' R' F2' F R");
                        break;
                    case "V":
                        txtSolution.append("\nSecond Target: DR");
                        txtSolution.append("\nThis cycle is an Algorithm.");
                        txtSolution.append("\n\nSolution: U R U R' U' R' U' R' U R");
                        break;
                    case "W":
                        txtSolution.append("\nSecond Target: DB");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [l' M' : [U L U', M2']]");
                        txtSolution.append("\nOr: l' M' U L U' M2' U L' U' M2 M l");
                        break;
                    case "X":
                        txtSolution.append("\nSecond Target: DL");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [L U' L : [S', L2']]");
                        txtSolution.append("\nOr: L U' L S' L2' S L2 L' U L'");
                        break;
                }
                break;
            case "E":
                txtSolution.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolution.setText("");
                txtSolution.append("First Target: LU");
                switch (target2) {
                    case "A":
                        txtSolution.append("\nSecond Target: UB");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U' M U : [M', U2]]");
                        txtSolution.append("\nOr: U' M U M' U2 M U2' U' M' U'");
                        break;
                    case "B":
                        txtSolution.append("\nSecond Target: UR");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [L F' L', S']");
                        txtSolution.append("\nOr: L F' L' S' L F L' S");
                        break;
                    case "D":
                        txtSolution.append("\nSecond Target: UL");
                        txtSolution.append("\n\nThis cycle cannot be done");
                        break;
                    case "E":
                        txtSolution.append("\nSecond Target: LU");
                        txtSolution.append("\n\nThis cycle cannot be done");
                        break;
                    case "F":
                        txtSolution.append("\nSecond Target: LF");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [S : [U', R' E R]]");
                        txtSolution.append("\nOr: S U' R' E R U R' E' R U S'");
                        break;
                    case "G":
                        txtSolution.append("\nSecond Target: LD");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [l' U L' : [S', L2]]");
                        txtSolution.append("\nOr: l' U L' S' L2 S L2' L U' l");
                        break;
                    case "H":
                        txtSolution.append("\nSecond Target: LB");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [S : [U', R E' R']]");
                        txtSolution.append("\nOr: S U' R E' R' U R E R' S'");
                        break;
                    case "J":
                        txtSolution.append("\nSecond Target: FR");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [M' : [U', R S' R']]");
                        txtSolution.append("\nOr: M' U' R S' R' U R S R' M");
                        break;
                    case "K":
                        txtSolution.append("\nSecond Target: FD");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [l' : [M', U' L U]]");
                        txtSolution.append("\nOr: l' M' U' L U M U' L' U l");
                        break;
                    case "L":
                        txtSolution.append("\nSecond Target: FL");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [L' U2 : [L S L', U]]");
                        txtSolution.append("\nOr: L' U2 L S L' U L S' L' U' U2' L'");
                        break;
                    case "M":
                        txtSolution.append("\nSecond Target: RU");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [M U : [M', U2']]");
                        txtSolution.append("\nOr: M U M' U2' M U2 U' M");
                        break;
                    case "N":
                        txtSolution.append("\nSecond Target: RB");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [L' F' : [E, L2]]");
                        txtSolution.append("\nOr: L' F' E L2 E' L2' F L");
                        break;
                    case "O":
                        txtSolution.append("\nSecond Target: RD");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R' F R : [S, R2']]");
                        txtSolution.append("\nOr: R' F R S R2' S' R2 R' F' R");
                        break;
                    case "P":
                        txtSolution.append("\nSecond Target: RF");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R M U : [M', U2]]");
                        txtSolution.append("\nOr: R M U' M' U2 M U2' U' M' R'");
                        break;
                    case "Q":
                        txtSolution.append("\nSecond Target: BU");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [L' : [U' L' U, M']]");
                        txtSolution.append("\nOr: L' U' L' U M' U' L U M' L");
                        break;
                    case "R":
                        txtSolution.append("\nSecond Target: BL");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U' R F : [R2' E']]");
                        txtSolution.append("\nOr: U' R F R2' E' R2 E F' R' U");
                        break;
                    case "S":
                        txtSolution.append("\nSecond Target: BD");
                        txtSolution.append("\nThis cycle is an algorithm.");
                        txtSolution.append("\n\nSolution: M' : (U M' U M)2");
                        txtSolution.append("\nOr: M' U M' U M U M' U M M");
                        break;
                    case "T":
                        txtSolution.append("\nSecond Target: BR");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [M' : [U', L' E L]]");
                        txtSolution.append("\nOr: M' U' L' E L U L' E' L M");
                        break;
                    case "U":
                        txtSolution.append("\nSecond Target: DF");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [L' F' : [L2, E']]");
                        txtSolution.append("\nOr: L' F' L2 E' L2' E F L");
                        break;
                    case "V":
                        txtSolution.append("\nSecond Target: DR");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [L2 : [L' F' L, S]]");
                        txtSolution.append("\nOr: L2 L' F' L S L' F L S' L2");
                        break;
                    case "W":
                        txtSolution.append("\nSecond Target: DB");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [L' M : [U' L U, M2']]");
                        txtSolution.append("\nOr: L' M U' L U M2' U' L' U M2 M' L");
                        break;
                    case "X":
                        txtSolution.append("\nSecond Target: DL");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [L F' L', S]");
                        txtSolution.append("\nOr: L F' L' S L F L' S'");
                }
                break;
            case "F":
                txtSolution.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolution.setText("");
                txtSolution.append("\nFirst Target: LF");
                switch (target2) {
                    case "A":
                        txtSolution.append("\nSecond Target: UB");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U : [R' E R, U2]]");
                        txtSolution.append("\nOr: U R' E R U2 R' E' R U2' U'");
                        break;
                    case "B":
                        txtSolution.append("\nSecond Target: UR");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [R' E R, U']");
                        txtSolution.append("\nOr: R' E R U' R' E' R U");
                        break;
                    case "D":
                        txtSolution.append("\nSecond Target: UL");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U2 : [R' E R, U]]");
                        txtSolution.append("\nOr: U2 R' E R U R' E' R U' U2");
                        break;
                    case "E":
                        txtSolution.append("\nSecond Target: LU");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [S : [R' E R, U']]");
                        txtSolution.append("\nOr: S R' E R U' R' E' R U S'");
                        break;
                    case "F":
                        txtSolution.append("\nSecond Target: LF");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "G":
                        txtSolution.append("\nSecond Target LD");
                        txtSolution.append("\nThis cycle is an S-Insert.");
                        txtSolution.append("\n\nSolution: [L, U S' U']");
                        txtSolution.append("\nOr: L U S' U' L' U S U'");
                        break;
                    case "H":
                        txtSolution.append("\nSecond Target: LB");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [M' U L : [S' L2']]");
                        txtSolution.append("\nOr: M' U L S' L2' S L2 L' U' M");
                        break;
                    case "J":
                        txtSolution.append("\nSecond Target: FR");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [E, R U' R']");
                        txtSolution.append("\nOr: E R U' R' E' R U R'");
                        break;
                    case "K":
                        txtSolution.append("\nSecond Target: FD");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M2' : [U' L' U, M]]");
                        txtSolution.append("\nOr: M2' U' L' U M U' L U M' M2");
                        break;
                    case "L":
                        txtSolution.append("\nSecond Target: FL");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "M":
                        txtSolution.append("\nSecond Target: RU");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [M L' U : [M', U2']]");
                        txtSolution.append("\nOr: M L' U M' U2' M U2 U' L M'");
                        break;
                    case "N":
                        txtSolution.append("\nSecond Target: RB");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [r U R' : [E, R2]]");
                        txtSolution.append("\nOr: r U R' E R2 E' R2' R U' r'");
                        break;
                    case "O":
                        txtSolution.append("\nSecond Target: RD");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [M' U R' : [E, R2]]");
                        txtSolution.append("\nOr: M' U R' E R2 E' R2' R U' M");
                        break;
                    case "P":
                        txtSolution.append("\nSecond Target: RF");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U E R' : [S, R2]]");
                        txtSolution.append("\nOr: U E R' S R2 S' R2' R E' U'");
                        break;
                    case "Q":
                        txtSolution.append("\nSecond Target: BU");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [U' L' U, M']");
                        txtSolution.append("\nOr: U' L' U M' U' L U M");
                        break;
                    case "R":
                        txtSolution.append("\nSecond Target: BL");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [E', L U L']");
                        txtSolution.append("\nOr: E' L U L' E L U' L'");
                        break;
                    case "S":
                        txtSolution.append("\nSecond Target: BD");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [U' r' : [R U R', E]]");
                        txtSolution.append("\nOr: U' r' R U R' E R U' R' E' r U");
                        break;
                    case "T":
                        txtSolution.append("\nSecond Target: BR");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [R2' : [E, R U' R']]");
                        txtSolution.append("\nOr: R2' E R U' R' E' R U R' R2");
                        break;
                    case "U":
                        txtSolution.append("\nSecond Target: DF");
                        txtSolution.append("\nThis cycle is an F-Swap.");
                        txtSolution.append("\n\nSolution: [U R' F2 : [R S R', F]]");
                        txtSolution.append("\nOr: U R' F2 R S R' F R S' R' F' F2 R U'");
                        break;
                    case "V":
                        txtSolution.append("\nSecond Target: DR");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U' E' R : [E', R2]]");
                        txtSolution.append("\nOr: U' E' R E' R2 E R2' R' E U");
                        break;
                    case "W":
                        txtSolution.append("\nSecond Target: DB");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M : [U' L' U, M2']]");
                        txtSolution.append("\nOr: M U' L' U M2' U' L U M2 M'");
                        break;
                    case "X":
                        txtSolution.append("\nSecond Target: DL");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [M : [U' L' U, M2']]");
                        txtSolution.append("\nOr: M U' L' U M2' U' L U M2 M'");
                        break;
                }
                break;
            case "G":
                txtSolution.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolution.setText("");
                txtSolution.append("First Target: LD");
                switch (target2) {
                    case "A":
                        txtSolution.append("\nSecond Target: UB");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U' : [L' E' L, U2']]");
                        txtSolution.append("\nOr: U' L' E' L U2' L' E L U2 U");
                        break;
                    case "B":
                        txtSolution.append("\nSecond Target: UR");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U2' : [L' E' L, U']]");
                        txtSolution.append("\nOr: U2' L' E' L U' L' E L U U2");
                        break;
                    case "D":
                        txtSolution.append("\nSecond Target: UL");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [L' E' L, U]");
                        txtSolution.append("\nOr: L' E' L U L' E L U'");
                        break;
                    case "E":
                        txtSolution.append("\nSecond Target: LU");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [l' U L : [S', L2']]");
                        txtSolution.append("\nOr: l' U L S' L2' S L2 L' U' l");
                        break;
                    case "F":
                        txtSolution.append("\nSecond Target: UB");
                        txtSolution.append("\nThis cycle in an S-Insert.");
                        txtSolution.append("\n\nSolution: [U S' U', L]");
                        txtSolution.append("\nOr: U S' U' L U S U' L'");
                        break;
                    case "G":
                        txtSolution.append("\nSecond Target: LD");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "H":
                        txtSolution.append("\nSecond Target: LB");
                        txtSolution.append("\nThis cycle is an S-Insert.");
                        txtSolution.append("\n\nSolution: [U S U', L']");
                        txtSolution.append("\nOr: U S U' L' U S' U' L");
                        break;
                    case "J":
                        txtSolution.append("\nSecond Target: FR");
                        txtSolution.append("\nThis cycle an E-Swap.");
                        txtSolution.append("\n\nSolution: [L' E' : [L U L', E']]");
                        txtSolution.append("\nOr: L' E' L U L' E' L U' L' E E L");
                        break;
                    case "K":
                        txtSolution.append("\nSecond Target: FD");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [U : [L F L', S]]");
                        txtSolution.append("\nOr: U L F L' S L F' L' S' U'");
                        break;
                    case "L":
                        txtSolution.append("\nSecond Target: FL");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [L f' L' : [S, L2]]");
                        txtSolution.append("\nOr: L f' L' S L2 S' L2' L f L'");
                        break;
                    case "M":
                        txtSolution.append("\nSecond Target: RU");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [L F' L : [S', L2']]");
                        txtSolution.append("\nL F' L S' L2' S L2 L' F L'");
                        break;
                    case "N":
                        txtSolution.append("\nSecond Target: RB");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [L F' : [E, L2']]");
                        txtSolution.append("\nOr: L F' E L2' E' L2 F L'");
                        break;
                    case "O":
                        txtSolution.append("\nSecond Target: RD");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R' F R' : [S', R2]]");
                        txtSolution.append("\nOr: R' F R' S' R2 S R2' R F' R");
                        break;
                    case "P":
                        txtSolution.append("\nSecond Target: RF");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [M' U' L' : [E', L2]]");
                        txtSolution.append("\nOr: M' U' L' E' L2 E L2' L U M");
                        break;
                    case "Q":
                        txtSolution.append("\nSecond Target: BU");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [L' : [U' L' U, M']]");
                        txtSolution.append("\nOr: L' U' L' U M' U' L U M L");
                        break;
                    case "R":
                        txtSolution.append("\nSecond Target: BL");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [S' U' R' : [E', R2]]");
                        txtSolution.append("\nOr: S' U' R' E' R2 E R2' R U S");
                        break;
                    case "S":
                        txtSolution.append("\nSecond Target: BD");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [U l : [L' U' L, E]]");
                        txtSolution.append("\nOr: U l L' U' L E L' U L E' l' U'");
                        break;
                    case "T":
                        txtSolution.append("\nSecond Target: BR");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [L E : [L' U L, E]]");
                        txtSolution.append("\nOr: L E L' U L E L' U' L E' E' L");
                    case "U":
                        txtSolution.append("\nSecond Target: DF");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [L F' : [L2' E']]");
                        txtSolution.append("\nOr: L F' L2' E' L2 E F L'");
                        break;
                    case "V":
                        txtSolution.append("\nSecond Target: DR");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [L' F' L, S]");
                        txtSolution.append("\nOr: L' F' L S L' F L S'");
                        break;
                    case "W":
                        txtSolution.append("\nSecond Target: DB");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [U : [S', L B' L']]");
                        txtSolution.append("\nOr: U S' L B' L' S L B L' U'");
                        break;
                    case "X":
                        txtSolution.append("\nSecond Target: DL");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                }
                break;
            case "H":
                txtSolution.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolution.setText("");
                txtSolution.append("First Target: RB");
                switch (target2) {
                    case "A":
                        txtSolution.append("\nSecond Target: UB");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U : [R E' R', U2]]");
                        txtSolution.append("\nOr: U R E' R' U2 R E R' U2' U'");
                        break;
                    case "B":
                        txtSolution.append("\nSecond Target: UR");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [R E' R', U']");
                        txtSolution.append("\nOr: R E' R' U' R E R' U");
                        break;
                    case "D":
                        txtSolution.append("\nSecond Target: UL");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U2 : [R E' R', U]]");
                        txtSolution.append("\nOr: U2 R E' R' U R E R' U' U2");
                        break;
                    case "E":
                        txtSolution.append("\nSecond Target: LU");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [S : [R E' R', U']]");
                        txtSolution.append("\nOr: S R E' R' U' R E R' U S'");
                        break;
                    case "F":
                        txtSolution.append("\nSecond Target: LF");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [M' U L' : [S', L2']]");
                        txtSolution.append("\nOr: M' U L' S' L2' S L2 L U' M");
                        break;
                    case "G":
                        txtSolution.append("\nSecond Target: LD");
                        txtSolution.append("\nThis cycle is an S-Insert.");
                        txtSolution.append("\n\nSolution: [L', U S' U']");
                        txtSolution.append("\nOr: L' U S' U' L U S U'");
                        break;
                    case "H":
                        txtSolution.append("\nSecond Target: LB");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "J":
                        txtSolution.append("\nSecond Target: FR");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [R2 : [E', R' U' R]]");
                        txtSolution.append("\nOr: R2 E' R' U' R E R' U R R2");
                        break;
                    case "K":
                        txtSolution.append("\nSecond Target: FD");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M' : [M', U' L U]]");
                        txtSolution.append("\nOr: M' M' U' L U M U' L' U M");
                        break;
                    case "L":
                        txtSolution.append("\nSecond Target: FL");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [E, L' U L]");
                        txtSolution.append("\nOr: E L' U L E' L' U' L");
                        break;
                    case "M":
                        txtSolution.append("\nSecond Target: RU");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R F : [R2', E']]");
                        txtSolution.append("\nR F R2' E' R2 E F' R");
                        break;
                    case "N":
                        txtSolution.append("\nSecond Target: RB");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [u' L : [S', L2']]");
                        txtSolution.append("\nOr: u' L S' L2' S L2 L' u");
                        break;
                    case "O":
                        txtSolution.append("\nSecond Target: RD");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R' F : [R2, E']]");
                        txtSolution.append("\nOr: R' F R2 E' R2' E F' R");
                        break;
                    case "P":
                        txtSolution.append("\nSecond Target: RF");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [l' U' L' : [E', L2]]");
                        txtSolution.append("\nOr: l' U' L' E' L2 E L2' L U l");
                        break;
                    case "Q":
                        txtSolution.append("\nSecond Target: BU");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [U' L U, M']");
                        txtSolution.append("\nOr: U' L U M' U' L' U M");
                        break;
                    case "R":
                        txtSolution.append("\nSecond Target: BL");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "S":
                        txtSolution.append("\nSecond Target: BD");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U' M : [U, L S L']]");
                        txtSolution.append("\nOr: U' M U L S L' U' L S' L M' U");
                        break;
                    case "T":
                        txtSolution.append("\nSecond Target: BR");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [E', R' U' R]");
                        txtSolution.append("\nOr: E' R' U' R E R' U R");
                        break;
                    case "U":
                        txtSolution.append("\nSecond Target: DF");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [l' U : [S', L2]]");
                        txtSolution.append("\nOr: l' U S' L2 S L2' U' l");
                        break;
                    case "V":
                        txtSolution.append("\nSecond Target: DR");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [u' R' : [E, R2]]");
                        txtSolution.append("\nOr: u' R' E R2 E' R2' R u");
                        break;
                    case "W":
                        txtSolution.append("\nSecond Target: DB");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M : [U' L U, M2']]");
                        txtSolution.append("\nOr: M U' L U M2' U' L' U M2 M'");
                        break;
                    case "X":
                        txtSolution.append("\nSecond Target: DL");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [u L' : [E, L2]]");
                        txtSolution.append("\nOr: u L' E L2 E' L2' L u");
                        break;
                }
                break;
            case "J":
                txtSolution.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolution.setText("");
                txtSolution.append("First Target: FR");
                switch (target2) {
                    case "A":
                        txtSolution.append("\nSecond Target: UB");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R' U : [S, R2]]");
                        txtSolution.append("\nOr: R' U S R2 S' R2' U' R");
                        break;
                    case "B":
                        txtSolution.append("\nSecond Target: UR");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [E' : [R' E R, U']]");
                        txtSolution.append("\nOr: E' R' E R U' R' E' R U E'");
                        break;
                    case "D":
                        txtSolution.append("\nSecond Target: UL");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [L' E2' L, U]");
                        txtSolution.append("\nOr: L' E2' L U L' E2 L U'");
                        break;
                    case "E":
                        txtSolution.append("\nSecond Target: LU");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [M' : [R S' R', U']]");
                        txtSolution.append("\nOr: M' R S' R' U' R S R' U M");
                        break;
                    case "F":
                        txtSolution.append("\nSecond Target: LF");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [R U' R', E]");
                        txtSolution.append("\nOr: R U' R' E R U R' E'");
                        break;
                    case "G":
                        txtSolution.append("\nSecond Target: LD");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [L' E2' : [L U L', E]]");
                        txtSolution.append("\nOr: L' E2' L U L' E L U' L' E' E2 L");
                        break;
                    case "H":
                        txtSolution.append("\nSecond Target: LB");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [R2 : [R' U' R, E']]");
                        txtSolution.append("\nOr: R2 R' U' R E' R' U R E R2");
                        break;
                    case "J":
                        txtSolution.append("\nSecond Target: FR");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "K":
                        txtSolution.append("\nSecond Target: FD");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M', U' R U]");
                        txtSolution.append("\nOr: M' U' R U M U' R' U");
                        break;
                    case "L":
                        txtSolution.append("\nSecond Target: FL");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R' U' R : [E, R2']]");
                        txtSolution.append("\nOr: R' U' R E R2' E' R2 R' U R");
                        break;
                    case "M":
                        txtSolution.append("\nSecond Target: RU");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [R U : [R' S' R, U]]");
                        txtSolution.append("\nOr: R U R' S' R U R' S R U' U' R'");
                        break;
                    case "N":
                        txtSolution.append("\nSecond Target: RB");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [R U' R', E']");
                        txtSolution.append("\nOr: R U' R' E' R U R' E");
                        break;
                    case "O":
                        txtSolution.append("\nSecond Target: RD");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R' f R' : [S', R2]]");
                        txtSolution.append("\nOr: R' f R' S' R2 S R2' R f' R");
                        break;
                    case "P":
                        txtSolution.append("\nSecond Target: RF");
                        txtSolution.append("\nThis cycle cannot be done");
                        break;
                    case "Q":
                        txtSolution.append("\nSecond Target: BU");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M, U' R U]");
                        txtSolution.append("\nOr: M U' R U M' U' R' U");
                        break;
                    case "R":
                        txtSolution.append("\nSecond Target: BL");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R' U' R' : [E', R2]]");
                        txtSolution.append("\nOr: R' U' R' E' R2 E R2' R U R");
                        break;
                    case "S":
                        txtSolution.append("\nSecond Target: BD");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [U2 : [M, U R U']]");
                        txtSolution.append("\nOr: U2 M U R U' M' U R' U' U2");
                        break;
                    case "T":
                        txtSolution.append("\nSecond Target: BR");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U R' : {S, R2]]");
                        txtSolution.append("\nOr: U R' S R2 S' R2' R U'");
                        break;
                    case "U":
                        txtSolution.append("\nSecond Target: DF");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [D' U L : [E', L2']]");
                        txtSolution.append("\nOr: D' U L E' L2' E L2 L' U' D");
                        break;
                    case "V":
                        txtSolution.append("\nSecond Target: DR");
                        txtSolution.append("\nThis cycle is an algorithm.");
                        txtSolution.append("\n\nSolution: U R' U' R' U R U R U R' U2");
                        break;
                    case "W":
                        txtSolution.append("\nSecond Target: DB");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M2', U' R U]");
                        txtSolution.append("\nOr: M2' U' R U M2 U' R' U");
                        break;
                    case "X":
                        txtSolution.append("\nSecond Target: DL");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U L : [E', L2]]");
                        txtSolution.append("\nOr: U L E' L2 E L2' L' U'");
                        break;
                }
                break;
            case "K":
                txtSolution.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolution.setText("");
                txtSolution.append("First Target: FD");
                switch (target2) {
                    case "A":
                        txtSolution.append("\nSecond Target: UB");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [R' F' : [E, R U R']]");
                        txtSolution.append("\nOr: R' F' E R U R' E' R U' R' F R");
                        break;
                    case "B":
                        txtSolution.append("\nSecond Target: UR");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [R : [U' R' U, M']]");
                        txtSolution.append("\nOr: R U' R' U M' U' R U M R'");
                        break;
                    case "D":
                        txtSolution.append("\nSecond Target: UL");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [L' : [U L U', M']]");
                        txtSolution.append("\nOr: L' U L U' M' U L' U' M L");
                        break;
                    case "E":
                        txtSolution.append("\nSecond Target: LU");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [l' : [U' L U, M']]");
                        txtSolution.append("\nOr: l' U' L U M' U' L' U M' l");
                        break;
                    case "F":
                        txtSolution.append("\nSecond Target: LF");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M' : [U' L' U, M']]");
                        txtSolution.append("\nOr: M' U' L' U M' U' L U M M");
                        break;
                    case "G":
                        txtSolution.append("\nSecond Target: LD");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [U : [S, L F L']]");
                        txtSolution.append("\nOr: U S L F L' S' L F' L' U'");
                        break;
                    case "H":
                        txtSolution.append("\nSecond Target: LB");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M' : [U' L U, M']]");
                        txtSolution.append("\nOr: M' U' L U M' U' L' U M M");
                        break;
                    case "J":
                        txtSolution.append("\nSecond Target: FR");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [U' R U, M']");
                        txtSolution.append("\nOr: U' R U M' U' R' U M");
                        break;
                    case "K":
                        txtSolution.append("\nSecond Target: FD");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "L":
                        txtSolution.append("\nSecond Target: FL");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [U L' U', M']");
                        txtSolution.append("\nOr: U L' U' M' U L U' M");
                        break;
                    case "M":
                        txtSolution.append("\nSecond Target: RU");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [r : [U R' U', M']]");
                        txtSolution.append("\nOr: r U R' U' M' U R U' M r'");
                        break;
                    case "N":
                        txtSolution.append("\nSecond Target: RB");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M' : [U R' U', M']]");
                        txtSolution.append("\nOr: M' U R' U' M' U R U' M M");
                        break;
                    case "O":
                        txtSolution.append("\nSecond Target: RD");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [U' : [S', R' F' R]]");
                        txtSolution.append("\nOr: U' S' R' F' R S R' F R U");
                        break;
                    case "P":
                        txtSolution.append("\nSecond Target: RF");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M' : [U R U', M']]");
                        txtSolution.append("\nOr: M' U R U' M' U R' U' M M");
                        break;
                    case "Q":
                        txtSolution.append("\nSecond Target: BU");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [U' : [S, R' F' R]]");
                        txtSolution.append("\nOr: U' S R' F' R S' R' F R U");
                        break;
                    case "R":
                        txtSolution.append("\nSecond Target: BL");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [U L U', M']");
                        txtSolution.append("\nOr: U L U' M' U L' U' M");
                        break;
                    case "S":
                        txtSolution.append("\nSecond Target: BD");
                        txtSolution.append("\nThis cycle is an algorithm.");
                        txtSolution.append("\n\nSolution: U M' U' M U2 M U M' U");
                        break;
                    case "T":
                        txtSolution.append("\nSecond Target: BR");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [U' R' U, M']");
                        txtSolution.append("\nOr: U' R' U M' U' R U M");
                        break;
                    case "U":
                        txtSolution.append("\nSecond Target: ");
                        txtSolution.append("\n\nThis cycle cannot be done");
                        break;
                    case "V":
                        txtSolution.append("\nSecond Target: DR");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U R' F' R' : [S, R2]]");
                        txtSolution.append("\nOr: U R' F' R' S R2 S' R2' R F R U'");
                        break;
                    case "W":
                        txtSolution.append("\nSecond Target: DB");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [D : [R F R', S']]");
                        txtSolution.append("\nOr: D R F R' S' R F' R' S D'");
                        break;
                    case "X":
                        txtSolution.append("\nSecond Target: DL");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U' L F L : [S', L2']]");
                        txtSolution.append("\nOr: U' L F L S' L2' S L2 L' F' L' U");
                        break;
                }
                break;
            case "L":
                txtSolution.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolution.setText("");
                txtSolution.append("First Target: FL");
                switch (target2) {
                    case "A":
                        txtSolution.append("\nSecond Target: UB");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [L U' : [S', L2']]");
                        txtSolution.append("\nOr: L U' S' L2' S L2 U L'");
                        break;
                    case "B":
                        txtSolution.append("\nSecond Target: UR");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [R E2 R', U']");
                        txtSolution.append("\nOr: R E2 R' U' R E2 R' U");
                        break;
                    case "D":
                        txtSolution.append("\nSecond Target: UL");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U2 : [R E2 R', U]]");
                        txtSolution.append("\nOr: U2 R E2 R' U R E2 R' U' U2");
                        break;
                    case "E":
                        txtSolution.append("\nSecond Target: LU");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [L' U' : [L S' L', U]]");
                        txtSolution.append("\nOr: L' U' L S' L' U L S L' U' U L");
                        break;
                    case "F":
                        txtSolution.append("\nSecond Target: LF");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "G":
                        txtSolution.append("\nSecond Target: LD");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [L f' L : [S, L2']]");
                        txtSolution.append("\nOr: L f' L S L2' S' L2 L' f L'");
                        break;
                    case "H":
                        txtSolution.append("\nSecond Target: LB");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [L' U L, E]");
                        txtSolution.append("\nOr: L' U L E L' U' L E'");
                        break;
                    case "J":
                        txtSolution.append("\nSecond Target: FR");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R' U' R' : [E, R2]]");
                        txtSolution.append("\nOr: R' U' R' E R2 E' R2' R U R");
                        break;
                    case "K":
                        txtSolution.append("\nSecond Target: FD");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M', U L' U']");
                        txtSolution.append("\nOr: M' U L' U' M U L U'");
                        break;
                    case "L":
                        txtSolution.append("\nSecond Target: FL");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "M":
                        txtSolution.append("\nSecond Target: RU");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [M' : [L' S L, U]]");
                        txtSolution.append("\nOr: M' L' S L U L' S' L U' M");
                        break;
                    case "N":
                        txtSolution.append("\nSecond Target: RB");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [L' : [U, L' E L]]");
                        txtSolution.append("\nOr: L' U L' E L U' L' E' L L");
                        break;
                    case "O":
                        txtSolution.append("\nSecond Target: RD");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [R E2 : [R' U' R, E']]");
                        txtSolution.append("\nOr: R E2 R' U' R E' R' U R E E2' R'");
                        break;
                    case "P":
                        txtSolution.append("\nSecond Target: RF");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [L' U L, E']");
                        txtSolution.append("\nOr: L' U L E' L' U' L E");
                        break;
                    case "Q":
                        txtSolution.append("\nSecond Target: BU");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M, U L' U']");
                        txtSolution.append("\nOr: M U L' U' M' U L U'");
                        break;
                    case "R":
                        txtSolution.append("\nSecond Target: BL");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U' L : [S', L2']]");
                        txtSolution.append("\nOr: U' L S' L2' S L2 L' U");
                        break;
                    case "S":
                        txtSolution.append("\nSecond Target: BD");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U' R' B : [E, R2]]");
                        txtSolution.append("\nOr: U' R' B E R2 E' R2' B' R U");
                        break;
                    case "T":
                        txtSolution.append("\nSecond Target: BR");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R U' R' : [E, R2]]");
                        txtSolution.append("\nOr: R U' R' E R2 E' R2' R U R'");
                        break;
                    case "U":
                        txtSolution.append("\nSecond Target: DF");
                        txtSolution.append("\nThis cycle is a 4-Mover");
                        txtSolution.append("\n\nSolution: [U' D R' : [E, R2]]");
                        txtSolution.append("\nOr: U' D R' E R2 E' R2' R D' U");
                        break;
                    case "V":
                        txtSolution.append("\nSecond Target: DR");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U' R' : [E, R2]]");
                        txtSolution.append("\nOr: U' R' E R2 E' R2' R U");
                        break;
                    case "W":
                        txtSolution.append("\nSecond Target: DB");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M2', U L' U']");
                        txtSolution.append("\nOr: M2' U L' U' M2 U L U'");
                        break;
                    case "X":
                        txtSolution.append("\nSecond Target: DL");
                        txtSolution.append("\nThis cycle is an algorithm");
                        txtSolution.append("\n\nSolution: U' L U L U' L' U' L' U' L U2'");
                        break;
                }
                break;
            case "M":
                txtSolution.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolution.setText("");
                txtSolution.append("First Target: RU");
                switch (target2) {
                    case "A":
                        txtSolution.append("\nSecond Target: UB");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U M U' : [M, U2]]");
                        txtSolution.append("\nOr: U M U' M U2 M' U2' U M' U'");
                        break;
                    case "B":
                        txtSolution.append("\nSecond Target: UR");
                        txtSolution.append("\nThis cycle cannot be done.");
                        break;
                    case "D":
                        txtSolution.append("\nSecond Target: UL");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [R' F R, S]");
                        txtSolution.append("\nOr: R' F R S R' F' R S'");
                        break;
                    case "E":
                        txtSolution.append("\nSecond Target: LU");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [M L' U' : [M', U2']]");
                        txtSolution.append("\nOr: M L' U' M' U2' M U2 U L M'");
                        break;
                    case "F":
                        txtSolution.append("\nSecond Target: LF");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [M L' U' : [M', U2']]");
                        txtSolution.append("\nOr: M L' U' M' U2 M U2 U L M'");
                        break;
                    case "G":
                        txtSolution.append("\nSecond Target: LD");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [L F' L' : [S', L2]]");
                        txtSolution.append("\nOr: L F' L' S' L2 S L2' L F L'");
                        break;
                    case "H":
                        txtSolution.append("\nSecond Target: LB");
                        txtSolution.append("\nThis cycle is 4-Mover.");
                        txtSolution.append("\n\nSolution: [R F : [E', R2']]");
                        txtSolution.append("\nOr: R F E' R2' E R2 F' R'");
                        break;
                    case "J":
                        txtSolution.append("\nSecond Target: FR");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [R U2' : [R' S' R, U']]");
                        txtSolution.append("\nOr: R U2' R' S' R U' R' S R U U2 R'");
                        break;
                    case "K":
                        txtSolution.append("\nSecond Target: FD");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [r : [M', U R' U']]");
                        txtSolution.append("\nOr: r M' U R' U' M U R U' r'");
                        break;
                    case "L":
                        txtSolution.append("\nSecond Target: FL");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [M' : [U, L' S L]]");
                        txtSolution.append("\nOr: M' U L' S L U' L' S' L M");
                        break;
                    case "M":
                        txtSolution.append("\nSecond Target: RU");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "N":
                        txtSolution.append("\nSecond Target: RB");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [S' : [U, L' E L]]");
                        txtSolution.append("\nOr: S' U L' E L U' L' E' L S");
                        break;
                    case "O":
                        txtSolution.append("\nSecond Target: RD");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [r U' R : [S, R2']]");
                        txtSolution.append("\nOr: r U' R S R2' S' R2 R' U r'");
                        break;
                    case "P":
                        txtSolution.append("\nSecond Target: RF");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [S' : [U, L E' L']]");
                        txtSolution.append("\nOr: S' U L E' L' U' L E L' S");
                        break;
                    case "Q":
                        txtSolution.append("\nSecond Target: BU");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [R : [U R' U', M']]");
                        txtSolution.append("\nOr: R U R' U' M' U R U' M R'");
                        break;
                    case "R":
                        txtSolution.append("\nSecond Target: BL");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [M' : [U, R E' R']]");
                        txtSolution.append("\nOr: M' U R E' R' U' R E R' M");
                        break;
                    case "S":
                        txtSolution.append("\nSecond Target: BD");
                        txtSolution.append("\nThis cycle is an algorithm");
                        txtSolution.append("\n\nSolution: M' : (U' M' U' M)2");
                        txtSolution.append("\nOr: M' U' M' U' M U' M' U' M2");
                        break;
                    case "T":
                        txtSolution.append("\nSecond Target: BR");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U L' F' : [L2, E]]");
                        txtSolution.append("\nOr: U L' F' L2 E L2' E' F L U'");
                        break;
                    case "U":
                        txtSolution.append("\nSecond Target: DF");
                        txtSolution.append("\nThis cycle is 4-Mover.");
                        txtSolution.append("\n\nSolution: [R F : [R2', E]]");
                        txtSolution.append("\nOr: R F R2' E R2 E' F' R'");
                        break;
                    case "V":
                        txtSolution.append("\nSecond Target: DR");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [R' F R, S']");
                        txtSolution.append("\nOr: R' F R S' R' F' R S");
                        break;
                    case "W":
                        txtSolution.append("\nSecond Target: DB");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [R M : [U R' U', M2']]");
                        txtSolution.append("\nOr: R M U R' U' M2' U R U' M2 M' R'");
                        break;
                    case "X":
                        txtSolution.append("\nSecond Target: DL");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [R2' : [R F R', S']]");
                        txtSolution.append("\nOr: R2' R F R' S' R F' R' S R2");
                        break;
                }
                break;
            case "N":
                txtSolution.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolution.setText("");
                txtSolution.append("First Target: RB");
                switch (target2) {
                    case "A":
                        txtSolution.append("\nSecond Target: UB");
                        txtSolution.append("\nThis cycle is a 4-Swap.");
                        txtSolution.append("\n\nSolution: [U' : [L' E L, U2']]");
                        txtSolution.append("\nOr: U' L' E L U2' L' E' L U2 U");
                        break;
                    case "B":
                        txtSolution.append("\nSecond Target: UR");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U2' : [L' E L, U']]");
                        txtSolution.append("\nOr: U2' L' E L U' L' E' L U U2");
                        break;
                    case "D":
                        txtSolution.append("\nSecond Target: UL");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [L' E L, U]");
                        txtSolution.append("\nOr: L' E L U L' E' L U'");
                        break;
                    case "E":
                        txtSolution.append("\nSecond Target: LU");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [L' F' : [E, L2]]");
                        txtSolution.append("\nOr: L' F' E L2 E' L2' F L");
                        break;
                    case "F":
                        txtSolution.append("\nSecond Target: LF");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [r U R : [E, R2']]");
                        txtSolution.append("\nOr: r U R E R2' E' R2 R' U' r'");
                        break;
                    case "G":
                        txtSolution.append("\nSecond Target: LD");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [L F' : [L2', E]]");
                        txtSolution.append("\nOr: L F' L2' E L2 E' F L'");
                        break;
                    case "H":
                        txtSolution.append("\nSecond Target: LB");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [u R' : [S, R2]]");
                        txtSolution.append("\nOr: u R' S R2 S' R2' R u'");
                        break;
                    case "J":
                        txtSolution.append("\nSecond Target: FR");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [E', R U' R']");
                        txtSolution.append("\nOr: E' R U' R' E R U R'");
                        break;
                    case "K":
                        txtSolution.append("\nSecond Target: FD");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M2' : [U R' U', M]]");
                        txtSolution.append("\nOr: M2' U R' U' M U R U' M' M2");
                        break;
                    case "L":
                        txtSolution.append("\nSecond Target: FL");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [L2' : [E, L U' L']]");
                        txtSolution.append("\nOr: L2' E L U' L' E' L U L' L2");
                        break;
                    case "M":
                        txtSolution.append("\nSecond Target: RU");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [S' : [L' E L, U]]");
                        txtSolution.append("\nOr: S' L' E L U L' E' L U' S");
                        break;
                    case "N":
                        txtSolution.append("\nSecond Target: RB");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "O":
                        txtSolution.append("\nSecond Target: RD");
                        txtSolution.append("\nThis cycle is an S-Insert.");
                        txtSolution.append("\n\nSolution: [R, U' S U]");
                        txtSolution.append("\nOr: R U' S U R' U' S' U");
                        break;
                    case "P":
                        txtSolution.append("\nSecond Target: RF");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [M' U' R : [S, R2']]");
                        txtSolution.append("\nOr: M' U' R S R2' S' R2 R' U M");
                        break;
                    case "Q":
                        txtSolution.append("\nSecond Target: BU");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [U R' U', M']");
                        txtSolution.append("\nOr: U R' U' M' U R U' M");
                        break;
                    case "R":
                        txtSolution.append("\nSecond Target: BL");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [E, L U L']");
                        txtSolution.append("\nOr: E L U L' E' L U' L'");
                        break;
                    case "S":
                        txtSolution.append("\nSecond Target: BD");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U M : [U', l' E l]]");
                        txtSolution.append("\nOr: U M U' l' E l U l' E l M' U'");
                        break;
                    case "T":
                        txtSolution.append("\nSecond Target: BR");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "U":
                        txtSolution.append("\nSecond Target: DF");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [r U' : [S, R2']]");
                        txtSolution.append("\nOr: r U' S R2' S' R2 U r");
                        break;
                    case "V":
                        txtSolution.append("\nSecond Target: DR");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [u' R : [E', R2']]");
                        txtSolution.append("\nOr: u' R E' R2' E R2 R' u");
                        break;
                    case "W":
                        txtSolution.append("\nSecond Target: DB");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M : [U R' U', M2']]");
                        txtSolution.append("\nOr: M U R' U' M2' U R U' M2 M'");
                        break;
                    case "X":
                        txtSolution.append("\nSecond Target: DL");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [u L : [E', L2]]");
                        txtSolution.append("\nOr: u L E' L2 E L2' L' u'");
                        break;
                }
                break;
            case "O":
                txtSolution.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolution.setText("");
                txtSolution.append("First Target: RD");
                switch (target2) {
                    case "A":
                        txtSolution.append("\nSecond Target: UB");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U : [R E R', U2]]");
                        txtSolution.append("\nOr: U R E R' U2 R E' R' U2' U'");
                        break;
                    case "B":
                        txtSolution.append("\nSecond Target: UR");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [R E R', U]");
                        txtSolution.append("\nOr: R E R' U R E' R' U'");
                        break;
                    case "D":
                        txtSolution.append("\nSecond Target: UL");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U2 : [R E R', U]]");
                        txtSolution.append("\nOr: U2 R E R' U R E' R' U' U2'");
                        break;
                    case "E":
                        txtSolution.append("\nSecond Target: LU");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R' F R' : [S, R2]]");
                        txtSolution.append("\nOr: R' F R' S R2 S' R2' R F' R");
                        break;
                    case "F":
                        txtSolution.append("\nSecond Target: LF");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [M' U R : [E, R2']]");
                        txtSolution.append("\nOr: M' U R E R2' E' R2 R' U' M");
                        break;
                    case "G":
                        txtSolution.append("\nSecond Target: LD");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [L F' L : [S, L2']]");
                        txtSolution.append("\nOr: L F' L S L2' S' L2 L' F L");
                        break;
                    case "H":
                        txtSolution.append("\nSecond Target: LB");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R' F : [E', R2]]");
                        txtSolution.append("\nOr: R' F E' R2 E R2' F' R");
                        break;
                    case "J":
                        txtSolution.append("\nSecond Target: FR");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R' f R : [S', R2']]");
                        txtSolution.append("\nOr: R' f R S' R2' S R2 R' f' R");
                        break;
                    case "K":
                        txtSolution.append("\nSecond Target: FD");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [U' : [R' F' R, S']]");
                        txtSolution.append("\nOr: U' R' F' R S' R' F R S U");
                        break;
                    case "L":
                        txtSolution.append("\nSecond Target: FL");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [R E : [R' U' R, E]]");
                        txtSolution.append("\nOr: R E R' U' R E R' U R E' E' R'");
                        break;
                    case "M":
                        txtSolution.append("\nSecond Target: RU");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [r U' R' : [S, R2]]");
                        txtSolution.append("\nOr: r U' R' S R2 S' R2' R U r");
                        break;
                    case "N":
                        txtSolution.append("\nSecond Target: RB");
                        txtSolution.append("\nThis cycle is an S-Insert.");
                        txtSolution.append("\n\nSolution: [U' S U, R]");
                        txtSolution.append("\nOr: U' S U R U' S' U R'");
                        break;
                    case "O":
                        txtSolution.append("\nSecond Target: RD");
                        txtSolution.append("\n\nThis cycle cannot be done");
                        break;
                    case "P":
                        txtSolution.append("\nSecond Target: RF");
                        txtSolution.append("\nThis cycle is an S-Insert.");
                        txtSolution.append("\n\nSolution: [U' S U, R']");
                        txtSolution.append("\nOr: U' S U R' U' S' U R");
                        break;
                    case "Q":
                        txtSolution.append("\nSecond Target: BU");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [R : [U R U', M']]");
                        txtSolution.append("\nOr: R U R U' M' U R' U' M R'");
                        break;
                    case "R":
                        txtSolution.append("\nSecond Target: BL");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [R' E' : [R U' R', E']]");
                        txtSolution.append("\nOr: R' E' R U' R' E' R U R' E E R");
                        break;
                    case "S":
                        txtSolution.append("\nSecond Target: BD");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [U' r' : [R U R', E']]");
                        txtSolution.append("\nOr: U' r' R U R' E' R U' R' E r U");
                        break;
                    case "T":
                        txtSolution.append("\nSecond Target: BR");
                        txtSolution.append("\nThis cycle is 4-Mover.");
                        txtSolution.append("\n\nSolution: [S U L : [E, L2']]");
                        txtSolution.append("\nOr: S U L E L2' E' L2 L' U' S'");
                        break;
                    case "U":
                        txtSolution.append("\nSecond Target: DF");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R' F : [E, R2]]");
                        txtSolution.append("\nOr: R' F E R2 E' R2' F' R");
                        break;
                    case "V":
                        txtSolution.append("\nSecond Target: DR");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "W":
                        txtSolution.append("\nSecond Target: DB");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\\nnSolution: [U' : [S, R' B R]]");
                        txtSolution.append("\nOr: Or: U' S R' B R S' R' B' R U");
                        break;
                    case "X":
                        txtSolution.append("\nSecond Target: DL");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [R F R', S']");
                        txtSolution.append("\nOr: R F R' S' R F' R' S");
                        break;
                }
                break;
            case "P":
                txtSolution.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolution.setText("");
                txtSolution.append("First Target: RF");
                switch (target2) {
                    case "A":
                        txtSolution.append("\nSecond Target: UB");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U' : [L E' L', U2']]");
                        txtSolution.append("\nOr: U' L E' L' U2' L E L' U2 U");
                        break;
                    case "B":
                        txtSolution.append("\nSecond Target: UR");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U2' : [L E' L', U']]");
                        txtSolution.append("\nOr: U2' L E' L' U' L E L' U U2");
                        break;
                    case "D":
                        txtSolution.append("\nSecond Target: UL");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [L E' L', U]");
                        txtSolution.append("\nOr: L E' L' U L E L' U'");
                        break;
                    case "E":
                        txtSolution.append("\nSecond Target: LU");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R M U' : [M', U2]]");
                        txtSolution.append("\nOr: R M U' M' U2 M U2' U M' R'");
                        break;
                    case "F":
                        txtSolution.append("\nSecond Target: LF");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U' E' L : [S', L2']]");
                        txtSolution.append("\nOr: U' e' L S' L2' S L2 L' E U");
                        break;
                    case "G":
                        txtSolution.append("\nSecond Target: LD");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [M' U' L : [E', L2]]");
                        txtSolution.append("\nOr: M' U' L E' L2 E L2' L' U M");
                        break;
                    case "H":
                        txtSolution.append("\nSecond Target: LB");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [l' U' L : [E', L2']]");
                        txtSolution.append("\nOr: l' U' L E' L2' E L2 L' U' l");
                        break;
                    case "J":
                        txtSolution.append("\nSecond Target: FR");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "K":
                        txtSolution.append("\nSecond Target: FD");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M2' : [U R U', M]]");
                        txtSolution.append("\nOr: M2' U R U' M U R' U' M' M2");
                        break;
                    case "L":
                        txtSolution.append("\nSecond Target: FL");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [E', L' U L]");
                        txtSolution.append("\nOr: E' L' U L E L' U' L");
                        break;
                    case "M":
                        txtSolution.append("\nSecond Target: RU");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [S' : [L E' L', U]]");
                        txtSolution.append("\nOr: S' L E' L' U L E L' U' S");
                        break;
                    case "N":
                        txtSolution.append("\nSecond Target: RB");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [M' U' R' : [S, R2]]");
                        txtSolution.append("\nOr: M' U' R' S R2 S' R2' R U M");
                        break;
                    case "O":
                        txtSolution.append("\nSecond Target: RD");
                        txtSolution.append("\nThis cycle is an S-Insert.");
                        txtSolution.append("\n\nSolution: [R', U' S U]");
                        txtSolution.append("\nOr: R' U' S U R U' S' U");
                        break;
                    case "P":
                        txtSolution.append("\nSecond Target: RF");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "Q":
                        txtSolution.append("\nSecond Target: BU");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [U R U', M']");
                        txtSolution.append("\nOr: U R U' M' U R' U' M");
                        break;
                    case "R":
                        txtSolution.append("\nSecond Target: BL");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [L2 : [E', L' U L]]");
                        txtSolution.append("\nOr: L2 E' L' U L E L' U' L L2'");
                        break;
                    case "S":
                        txtSolution.append("\nSecond Target: BD");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [U l : [L' U' L, E']]");
                        txtSolution.append("\nOr: U l L' U' L E' L' U L E l' U'");
                        break;
                    case "T":
                        txtSolution.append("\nSecond Target: BR");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [E, R' U' R]");
                        txtSolution.append("\nOr: E R' U' R E' R' U R");
                        break;
                    case "U":
                        txtSolution.append("\nSecond Target: DF");
                        txtSolution.append("\nThis cycle is an F-Swap.");
                        txtSolution.append("\n\nSolution: [U' L F2' : [L' S' L, F']]");
                        txtSolution.append("\nOr: U' L F2' L S' L F' L' S L F F2 L' U");
                        break;
                    case "V":
                        txtSolution.append("\nSecond Target: DR");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U' E' R' : [E, R2]]");
                        txtSolution.append("\nOr: U' E' R' E R2 E' R2' R E U");
                        break;
                    case "W":
                        txtSolution.append("\nSecond Target: DB");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M : [U R U', M2']]");
                        txtSolution.append("\nOr: M U R U' M2' U R' U' M2 M'");
                        break;
                    case "X":
                        txtSolution.append("\nSecond Target: DL");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U E L' : [E, L2]]");
                        txtSolution.append("\nOr: U E L' E L2 E' L2' L E' U'");
                        break;
                }
                break;
            case "Q":
                txtSolution.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolution.setText("");
                txtSolution.append("First Target: BU");
                switch (target2) {
                    case "A":
                        txtSolution.append("\nSecond Target: UB");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                    case "B":
                        txtSolution.append("\nSecond Target: UR");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [R' : [U' R U, M]]");
                        txtSolution.append("\nOr: R' U' R U M U' R' U M' R");
                        break;
                    case "D":
                        txtSolution.append("\nSecond Target: UL");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [L : [U L' U', M]]");
                        txtSolution.append("\nOr: L U L' U' M U L U' M' L'");
                        break;
                    case "E":
                        txtSolution.append("\nSecond Target: LU");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [l' : [U' L U, M]]");
                        txtSolution.append("\nOr: l 'U' L U M U' L' U M' l");
                        break;
                    case "F":
                        txtSolution.append("\nSecond Target: LF");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M', U' L' U]");
                        txtSolution.append("\nOr: M' U' L' U M U' L U");
                        break;
                    case "G":
                        txtSolution.append("\nSecond Target: LD");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [l' : [U' L' U, M]]");
                        txtSolution.append("\nOr: l' U' L' U M U' L U M' l");
                        break;
                    case "H":
                        txtSolution.append("\nSecond Target: LB");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M', U' L U]");
                        txtSolution.append("\nOr: M' U' L U M U' L' U");
                        break;
                    case "J":
                        txtSolution.append("\nSecond Target: ");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [U' R U, M]");
                        txtSolution.append("\nOr: U' R U M U' R' U M'");
                        break;
                    case "K":
                        txtSolution.append("\nSecond Target: FD");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [U' : [R' F' R, S]]");
                        txtSolution.append("\nOr: U' R' F' R S R' F R S' U");
                        break;
                    case "L":
                        txtSolution.append("\nSecond Target: FL");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [U L' U', M]");
                        txtSolution.append("\nOr: U L' U' M U L U' M'");
                        break;
                    case "M":
                        txtSolution.append("\nSecond Target: RU");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [r : [U R' U', M]]");
                        txtSolution.append("\nOr: r U R' U' M U R U' M' r'");
                        break;
                    case "N":
                        txtSolution.append("\nSecond Target: RB");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M', U R' U']");
                        txtSolution.append("\nOr: M' U R' U' M U R U'");
                        break;
                    case "O":
                        txtSolution.append("\nSecond Target: RD");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [r : [U R U', M]]");
                        txtSolution.append("\nOr: r U R U' M U R' U' M' r'");
                        break;
                    case "P":
                        txtSolution.append("\nSecond Target: RF");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M', U R U']");
                        txtSolution.append("\nOr: M' U R U' M U R' U'");
                        break;
                    case "Q":
                        txtSolution.append("\nSecond Target: BU");
                        txtSolution.append("\nThis cycle cannot be done.");
                        break;
                    case "R":
                        txtSolution.append("\nSecond Target: BL");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [U L U', M]");
                        txtSolution.append("\nOr: U L U' M U L' U' M'");
                        break;
                    case "S":
                        txtSolution.append("\nSecond Target: BD");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [U' : [R B R', S]]");
                        txtSolution.append("\nOr: U' R B R' S R B' R' S' U");
                        break;
                    case "T":
                        txtSolution.append("\nSecond Target: BR");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [U' R' U, M]");
                        txtSolution.append("\nOr: U' R' U M U' R U M'");
                        break;
                    case "U":
                        txtSolution.append("\nSecond Target: DF");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [U : [S, R' F' R]]");
                        txtSolution.append("\nOr: U S R' F' R S' R' F R U'");
                        break;
                    case "V":
                        txtSolution.append("\nSecond Target: DR");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [R' : [U' R' U, M]]");
                        txtSolution.append("\nOr: R' U' R' U M U' R U M' R");
                        break;
                    case "W":
                        txtSolution.append("\nSecond Target: DB");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [U : [S, R B R']]");
                        txtSolution.append("\nOr: U S R B R' S' R B' R' U'");
                        break;
                    case "X":
                        txtSolution.append("\nSecond Target: DL");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [L : [U L U', M]]");
                        txtSolution.append("\nOr: L U L U' M U L' U' M' L'");
                        break;
                }
                break;
            case "R":
                txtSolution.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolution.setText("");
                txtSolution.append("First Target: BL");
                switch (target2) {
                    case "A":
                        txtSolution.append("\nSecond Target: UB");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [L' U : [L2, S']]");
                        txtSolution.append("\nOr: L' U L2 S' L2' S U' L");
                        break;
                    case "B":
                        txtSolution.append("\nSecond Target: UR");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [R' E2 R, U']");
                        txtSolution.append("\nOr: R' E2 R U' R' E2' R U");
                        break;
                    case "D":
                        txtSolution.append("\nSecond Target: UR");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U2 : [R' E2 R, U]]");
                        txtSolution.append("\nOr: U2 R' E2 R U R' E2' R U' U2'");
                        break;
                    case "E":
                        txtSolution.append("\nSecond Target: LU");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U' R F : [E', R2']]");
                        txtSolution.append("\nOr: U' R F E' R2' E R2 F' R' U");
                        break;
                    case "F":
                        txtSolution.append("\n\nSecond Target: LF");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [L U L', E']");
                        txtSolution.append("\nOr: L U L' E' L U' L' E'");
                        break;
                    case "G":
                        txtSolution.append("\nSecond Target: LD");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [S' U' R : [E', R2']]");
                        txtSolution.append("\nOr: S' U' R E' R2' E R2 R' U S");
                        break;
                    case "H":
                        txtSolution.append("\nSecond Target: LB");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "J":
                        txtSolution.append("\n\nSecond Target: FR");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R' U' R : [E', R2']]");
                        txtSolution.append("\nOr: R' U' R E' R2' E R2 R' U R");
                        break;
                    case "K":
                        txtSolution.append("\nSecond Target: FD");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M', U L U']");
                        txtSolution.append("\nOr: M' U L U' M U L' U'");
                        break;
                    case "L":
                        txtSolution.append("\nSecond Target: FL");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U' L' : [S', L2]]");
                        txtSolution.append("\nOr: U' L' S' L2 S L2' L U");
                        break;
                    case "M":
                        txtSolution.append("\nSecond Target: RU");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [M' : [R E' R', U]]");
                        txtSolution.append("\nOr: M' R E' R' U R E R' U' M");
                        break;
                    case "N":
                        txtSolution.append("\nSecond Target: RB");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [L U L', E]");
                        txtSolution.append("\nOr: L U L' E L U' L' E'");
                        break;
                    case "O":
                        txtSolution.append("\nSecond Target: RD");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [R' E2 : [R U' R', E]]");
                        txtSolution.append("\nOr: R' E2 R U' R' E R U R' E' E2' R");
                        break;
                    case "P":
                        txtSolution.append("\nSecond Target: RF");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [L2 : [L' U L, E']]");
                        txtSolution.append("\nOr: L2 L' U L E' L' U' L E L2'");
                        break;
                    case "Q":
                        txtSolution.append("\nSecond Target: BU");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M, U L U']");
                        txtSolution.append("\nOr: M U L U' M' U L' U'");
                        break;
                    case "R":
                        txtSolution.append("\nSecond Target: BL");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "S":
                        txtSolution.append("\nSecond Target: BD");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [U2' : [M, U' L U]]");
                        txtSolution.append("\nOr: U2' M U' L U M' U' L' U U2");
                        break;
                    case "T":
                        txtSolution.append("\nSecond Target: BR");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R U' R : [E', R2]]");
                        txtSolution.append("\nOr: R U' R E' R2 E R2' R' U R'");
                        break;
                    case "U":
                        txtSolution.append("\nSecond Target: DF");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [D U' R : [E', R2']]");
                        txtSolution.append("\nOr: D U' R E' R2' E R2 R' U D'");
                        break;
                    case "V":
                        txtSolution.append("\nSecond Target: DR");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U' R : [E', R2']]");
                        txtSolution.append("\nOr: U' R E' R2' E R2 R' U");
                        break;
                    case "W":
                        txtSolution.append("\nSecond Target: DB");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M2, U L U']");
                        txtSolution.append("\nOr: M2 U L U' M2' U L' U'");
                        break;
                    case "X":
                        txtSolution.append("\nSecond Target: DL");
                        txtSolution.append("\nThis cycle is an algorithm.");
                        txtSolution.append("\n\nSolution: U' L' U' L' U L U L U L'");
                        break;
                }
                break;
            case "S":
                txtSolution.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolution.setText("");
                txtSolution.append("First Target: BD");
                switch (target2) {
                    case "A":
                        txtSolution.append("\nSecond Target: UB");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U R' B R : [S, R2']]");
                        txtSolution.append("\nOr: U R' B R S R2' S' R2 R' B' R U'");
                        break;
                    case "B":
                        txtSolution.append("\nSecond Target: UR");
                        txtSolution.append("\nThis cycle is an algorithm.");
                        txtSolution.append("\n\nSolution: (M U' M' U)2");
                        txtSolution.append("\nOr: M U' M' U M U' M' U");
                        break;
                    case "D":
                        txtSolution.append("\nSecond Target: UL");
                        txtSolution.append("\nThis cycle is an algorithm.");
                        txtSolution.append("\n\nSolution: (M U M' U)2");
                        txtSolution.append("\nOr: M U M' U M U M' U");
                        break;
                    case "E":
                        txtSolution.append("\nSecond Target: LU");
                        txtSolution.append("\nThis cycle is an algorithm.");
                        txtSolution.append("\n\nSolution: M2' : (U' M U' M')2");
                        txtSolution.append("\nOr: M2' U' M U' M' U' M U' M' M2");
                        break;
                    case "F":
                        txtSolution.append("\nSecond Target: LF");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [U' r' : [E, R U R']]");
                        txtSolution.append("\nOr: U' r' E R U R' E' R U' R' r U");
                        break;
                    case "G":
                        txtSolution.append("\nSecond Target: LD");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [U l : [E, L' U' L]]");
                        txtSolution.append("\nOr: U l E L' U' L E' L' U L l' U'");
                        break;
                    case "H":
                        txtSolution.append("\nSecond Target: LB");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U' M : [L S L', U]]");
                        txtSolution.append("\nOr: U' M L S L' U L S' L' U' M' U");
                        break;
                    case "J":
                        txtSolution.append("\nSecond Target: FR");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [U2' : [U R U', M]]");
                        txtSolution.append("\nOr: U2' U R U' M U R' U' M' U2");
                        break;
                    case "K":
                        txtSolution.append("\nSecond Target: FD");
                        txtSolution.append("\nThis cycle is an algorithm.");
                        txtSolution.append("\n\nSolution: U M U M' U2 M' U' M U");
                        break;
                    case "L":
                        txtSolution.append("\nSecond Target: FL");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U' R' B : [R2, E]]");
                        txtSolution.append("\nOr: U' R' B R2 E R2' E' B' R U");
                        break;
                    case "M":
                        txtSolution.append("\nSecond Target: RU");
                        txtSolution.append("\nThis cycle is an algorithm.");
                        txtSolution.append("\n\nSolution: M2' : (U M U M')2");
                        txtSolution.append("\nOr: M2' U M U M' U M U M' M2");
                        break;
                    case "N":
                        txtSolution.append("\nSecond Target: RB");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [U M : [R' S' R, U']]");
                        txtSolution.append("\nOr: U M R' S' R U' R' S R U M' U'");
                        break;
                    case "O":
                        txtSolution.append("\nSecond Target: RD");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [U' r' : [E', R U R']]");
                        txtSolution.append("\nOr: U' r' E' R U R' E R U' R' r U");
                        break;
                    case "P":
                        txtSolution.append("\nSecond Target: RF");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [U l : [E', L' U' L]]");
                        txtSolution.append("\nOr: U l E' L' U' L E L' U L l' U'");
                        break;
                    case "Q":
                        txtSolution.append("\nSecond Target: BU");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [U' : [S, R B R']]");
                        txtSolution.append("\nOr: U' S R B R' S' R B' R' U");
                        break;
                    case "R":
                        txtSolution.append("\nSecond Target: BL");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [U2 : [U' L U, M]]");
                        txtSolution.append("\nOr: U2 U' L U M U' L' U M' U2");
                        break;
                    case "S":
                        txtSolution.append("\nSecond Target: BD");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "T":
                        txtSolution.append("\nSecond Target: BR");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [U2' : [U R' U', M]]");
                        txtSolution.append("\nOr: U2' U R' U' M U R U' M' U2");
                        break;
                    case "U":
                        txtSolution.append("\nSecond Target: DF");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [D' : [R F R', S']]");
                        txtSolution.append("\nOr: D' R F R' S' R F' R' S D");
                        break;
                    case "V":
                        txtSolution.append("\nSecond Target: DR");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U L B' L' : [S, L2]]");
                        txtSolution.append("\nOr: U L B' L' S L2 S' L2' L B L' U'");
                        break;
                    case "W":
                        txtSolution.append("\nSecond Target: DB");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "X":
                        txtSolution.append("\nLocation: DL");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U' R' B R : [S', R2']]");
                        txtSolution.append("\nOr: U' R' B R S' R2' S R2 R' B' R U");
                        break;
                }
                break;
            case "T":
                txtSolution.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolution.setText("");
                txtSolution.append("First Target: BR");
                switch (target2) {
                    case "A":
                        txtSolution.append("\nSecond Target: UB");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R U' : [R2', S]]");
                        txtSolution.append("\nOr: R U' R2' S R2 S' U R'");
                        break;
                    case "B":
                        txtSolution.append("\nSecond Target: UR");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [E : [R E' R', U']]");
                        txtSolution.append("\nOr: E R E' R' U' R E R' U E'");
                        break;
                    case "D":
                        txtSolution.append("\nSecond Target: UL");
                        txtSolution.append("\nThis cycle is a U-Swap.");
                        txtSolution.append("\n\nSolution: [L E2' L', U]");
                        txtSolution.append("\nOr: L E2' L' U L E2 L' U'");
                        break;
                    case "E":
                        txtSolution.append("\nSecond Target: LU");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [l' : [E, L U' L']]");
                        txtSolution.append("\nOr: l' E L U' L' E' L U L' l");
                        break;
                    case "F":
                        txtSolution.append("\nSecond Target: LF");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [R2' : [R U' R', E]]");
                        txtSolution.append("\nOr: R2' R U' R' E R U R' E' R2");
                        break;
                    case "G":
                        txtSolution.append("\nSecond Target: LD");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [L E2' : [L' U L, E']]");
                        txtSolution.append("\nOr: L E2' L' U L E' L' U' L E E2 L'");
                        break;
                    case "H":
                        txtSolution.append("\nSecond Target: LB");
                        txtSolution.append("\nThis cycle is an E-Swap.");
                        txtSolution.append("\n\nSolution: [R' U' R, E']");
                        txtSolution.append("\nOr: R' U' R E' R' U R E");
                        break;
                    case "J":
                        txtSolution.append("\nSecond Target: FR");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U R : [S, R2']]");
                        txtSolution.append("\nOr: U R S R2' S' R2 R' U'");
                        break;
                    case "K":
                        txtSolution.append("\nSecond Target: FD");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M', U' R' U]");
                        txtSolution.append("\nOr: M' U' R' U M U' R U");
                        break;
                    case "L":
                        txtSolution.append("\nSecond Target: FL");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R U' R : [E, R2']]");
                        txtSolution.append("\nOr: R U 'R E R2' E' R2 R' U R'");
                        break;
                    case "M":
                        txtSolution.append("\nSecond Target: RU");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R u' R' : [E', R2]]");
                        txtSolution.append("\nOr: R u' R' E' R2 E R2' R u R'");
                        break;
                    case "N":
                        txtSolution.append("\nSecond Target: RB");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "O":
                        txtSolution.append("\nSecond Target: RD");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [S U L' : [E, L2]]");
                        txtSolution.append("\nOr: S U L' E L2 E' L2' L U' S'");
                        break;
                    case "P":
                        txtSolution.append("\nSecond Target: RF");
                        txtSolution.append("\nThis cycle is an E-Swap");
                        txtSolution.append("\n\nSolution: [R' U' R, E]");
                        txtSolution.append("\nOr: R' U' R E R' U R E'");
                        break;
                    case "Q":
                        txtSolution.append("\nSecond Target: BU");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M, U' R' U]");
                        txtSolution.append("\nOr: M U' R' U M' U' R U");
                        break;
                    case "R":
                        txtSolution.append("\nSecond Target: BL");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R U' R' : [E', R2]]");
                        txtSolution.append("\nOr: R U' R' E' R2 E R2' R U R'");
                        break;
                    case "S":
                        txtSolution.append("\nSecond Target: BD");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\nSolution: [U2 : [M, U R' U']]");
                        txtSolution.append("Or: U2 M U R' U' M' U R U' U2'");
                        break;
                    case "T":
                        txtSolution.append("\nSecond Target: BR");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "U":
                        txtSolution.append("\nSecond Target: DF");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U R' U : [M', U2]]");
                        txtSolution.append("\nOr: U R' U M' U2 M U2' U' R U'");
                        break;
                    case "V":
                        txtSolution.append("\nSecond Target: DR");
                        txtSolution.append("\nThis cycle is an algorithm.");
                        txtSolution.append("\n\nSolution: U R U R U' R' U' R' U' R");
                        break;
                    case "W":
                        txtSolution.append("\nSecond Target: DB");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M2', U' R' U]");
                        txtSolution.append("\nOr: M2' U' R' U M2 U' R U");
                        break;
                    case "X":
                        txtSolution.append("\nSecond Target: DL");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U L' : [E, L2]]");
                        txtSolution.append("\nOr: U L' E L2 E' L2' L U'");
                        break;
                }
                break;

            case "U":
                txtSolution.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolution.setText("");
                txtSolution.append("First Target: DF");
                switch (target2) {
                    case "A":
                        txtSolution.append("\nSecond Target: UB");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [M', U2]");
                        txtSolution.append("\nOr: M' U2 M U2'");
                        break;
                    case "B":
                        txtSolution.append("\nSecond Target: UR");
                        txtSolution.append("\nThis cycle is an F-Swap.");
                        txtSolution.append("\n\nSolution: [L F' : [L' S' L, F2']]");
                        txtSolution.append("\nOr: L F' L' S' L F2' F' S L F2 F L'");
                        break;
                    case "D":
                        txtSolution.append("\nSecond Target: UL");
                        txtSolution.append("\nThis cycle is an F-Swap.");
                        txtSolution.append("\n\nSolution: [R' F : [R S R', F2]]");
                        txtSolution.append("\nOr: R' F R S R' F2 R S' R' F2' F' R");
                        break;
                    case "E":
                        txtSolution.append("\nSecond Target: LU");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [L' F' : [E', L2]]");
                        txtSolution.append("\nOr: L' F' E' L2 E L2' F L");
                        break;
                    case "F":
                        txtSolution.append("\nSecond Target: LF");
                        txtSolution.append("\nThis cycle is an F-Swap.");
                        txtSolution.append("\n\nSolution: [U R' F' : [R S R', F']]");
                        txtSolution.append("\nOr: U R' F' R S R' F' R S' R' F F R U'");
                        break;
                    case "G":
                        txtSolution.append("\nSecond Target: LD");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [L F' : [E', L2']]");
                        txtSolution.append("\nOr: L F' E' L2' E L2 F L'");
                        break;
                    case "H":
                        txtSolution.append("\nSecond Target: LB");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [l' U : [L2, S']");
                        txtSolution.append("\nOr: l' U L2 S' L2' S U' l");
                        break;
                    case "J":
                        txtSolution.append("\nSecond Target: FR");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U R U' : [M', U2]]");
                        txtSolution.append("\nOr: U R U' M' U2 M U2' U R' U'");
                        break;
                    case "K":
                        txtSolution.append("\nSecond Target: FD");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "L":
                        txtSolution.append("\nSecond Target: FL");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U' D R : [E, R2']]");
                        txtSolution.append("\nOr: U' D R E R2' E' R2 R' D' U");
                        break;
                    case "M":
                        txtSolution.append("\nSecond Target: RU");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R F : [E, R2']]");
                        txtSolution.append("\nOr: R F E R2' E' R2 F' R'");
                        break;
                    case "N":
                        txtSolution.append("\nSecond Target: RB");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [r U' : [R2', S]]");
                        txtSolution.append("\nOr: r U' R2' S R2 S' U r'");
                        break;
                    case "O":
                        txtSolution.append("\nSecond Target: RD");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R' F : [E, R2]]");
                        txtSolution.append("\nOr: R' F E R2 E' R2' F' R");
                        break;
                    case "P":
                        txtSolution.append("\nSecond Target: RF");
                        txtSolution.append("\nThis cycle is an F-Swap");
                        txtSolution.append("\n\nSolution: [U' L F : [L' S' L, F]]");
                        txtSolution.append("\nOr: U' L F L' S' L F L' S L F' F' L' U");
                        break;
                    case "Q":
                        txtSolution.append("\nSecond Target: BU");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [U : [R' F' R, S]]");
                        txtSolution.append("\nOr: U R' F' R S R' F R S' U'");
                        break;
                    case "R":
                        txtSolution.append("\nSecond Target: BL");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U' L U : [M', U2']]");
                        txtSolution.append("\nOr: U' L U M' U2' M U2 U' L' U");
                        break;
                    case "S":
                        txtSolution.append("\nSecond Target: BD");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [D' : [S', R F R']]");
                        txtSolution.append("\nOr: D' S' R F R' S R F' R'");
                        break;
                    case "T":
                        txtSolution.append("\nSecond Target: BR");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U R' U' : [M', U2]]");
                        txtSolution.append("\nOr: U R' U' M' U2 M U2' U R U'");
                        break;
                    case "U":
                        txtSolution.append("\nSecond Target: DF");
                        txtSolution.append("\n\nThis cycle cannot be done");
                        break;
                    case "V":
                        txtSolution.append("\nSecond Target: ");
                        txtSolution.append("\nThis cycle is an F-Swap.");
                        txtSolution.append("\n\nSolution: [R' F : [R S' R', F2]]");
                        txtSolution.append("\nOr: R' F R S' R' F2 R S R' F2' F' R");
                        break;
                    case "W":
                        txtSolution.append("\nSecond Target: DB");
                        txtSolution.append("\nThis cycle is an algorithm");
                        txtSolution.append("\n\nSolution: u2 M' u2 M'");
                        break;
                    case "X":
                        txtSolution.append("\nSecond Target: DL");
                        txtSolution.append("\nThis cycle is an F-Swap.");
                        txtSolution.append("\n\nSolution: [L F' : [L' S L, F2']]");
                        txtSolution.append("\nOr: L F' L' S L F2' L' S' L F2 F L'");
                        break;
                }
                break;
            case "V":
                txtSolution.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolution.setText("");
                txtSolution.append("First Target: DR");
                switch (target2) {
                    case "A":
                        txtSolution.append("\nSecond Target: UB");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U : [S, R2']]");
                        txtSolution.append("\nOr: U S R2' S' R2 U'");
                        break;
                    case "B":
                        txtSolution.append("\nSecond Target: UR");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [R U R' : [S, R2]]");
                        txtSolution.append("\nOr: R U R' S R2 S' R2' R U' R' ");
                        break;
                    case "D":
                        txtSolution.append("\nSecond Target: UL");
                        txtSolution.append("\nThis cycle is an algorithm.");
                        txtSolution.append("\n\nSolution: R' U' R U R U R U R U' R' U'");
                        break;
                    case "E":
                        txtSolution.append("\nSecond Target: LU");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [L2 : [S, L' F' L]]");
                        txtSolution.append("\nOr: L2 S L' F' L S' L' F L L2'");
                        break;
                    case "F":
                        txtSolution.append("\nSecond Target: LF");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U' E' R' : [E', R2]]");
                        txtSolution.append("\nOr: U' E' R' E' R2 E R2' R E U");
                        break;
                    case "G":
                        txtSolution.append("\nSecond Target: LD");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [S, L' F' L]");
                        txtSolution.append("\nOr: S L' F' L S' L' F L");
                        break;
                    case "H":
                        txtSolution.append("\nSecond Target: LB");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [u' R : [E, R2']]");
                        txtSolution.append("\nOr: u' R E R2' E' R2 R' u");
                        break;
                    case "J":
                        txtSolution.append("\nSecond Target: FR");
                        txtSolution.append("\nThis cycle is an algorithm.");
                        txtSolution.append("\n\nSolution: U2 R U' R' U' R' U' R U R U'");
                        break;
                    case "K":
                        txtSolution.append("\nSecond Target: FD");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U R' F' R : [S, R2']]");
                        txtSolution.append("\nOr: U R' F' R S R2' S' R2 R' F R U'");
                        break;
                    case "L":
                        txtSolution.append("\nSecond Target: FL");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U' R : [E, R2']]");
                        txtSolution.append("\nOr: U' R E R2' E' R2 R' U");
                        break;
                    case "M":
                        txtSolution.append("\nSecond Target: RU");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [S', R' F R]");
                        txtSolution.append("\nOr: S' R' F R S R' F' R");
                        break;
                    case "N":
                        txtSolution.append("\nSecond Target: RB");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [u' R' : [E', R2]]");
                        txtSolution.append("\nOr: u' R' E' R2 E R2' R u");
                        break;
                    case "O":
                        txtSolution.append("\nSecond Target: RD");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "P":
                        txtSolution.append("\nSecond Target: RF");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U' E' R : [E, R2']]");
                        txtSolution.append("\nOr: U' E' R E R2' E' R2 R' E U");
                        break;
                    case "Q":
                        txtSolution.append("\nSecond Target: BU");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [r' : [U' R' U, M']]");
                        txtSolution.append("\nOr: r' U' R' U M' U' R U M r");
                        break;
                    case "R":
                        txtSolution.append("\nSecond Target: BL");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U' R' : [E', R2]]");
                        txtSolution.append("\nOr: U' R' E' R2 E R2' R U");
                        break;
                    case "S":
                        txtSolution.append("\nSecond Target: BD");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U L B' L : [S, L2']]");
                        txtSolution.append("\nOr: U L B' L S L2' S' L2 L' B L' U'");
                        break;
                    case "T":
                        txtSolution.append("\nSecond Target: BR");
                        txtSolution.append("This cycle is an algorithm.");
                        txtSolution.append("\nSolution: R' U R U R U R' U' R' U'");
                        break;
                    case "U":
                        txtSolution.append("\nSecond Target: DF");
                        txtSolution.append("\nThis cycle is an F-Swap.");
                        txtSolution.append("\n\nSolution: [R' F' : [R S' R', F2]]");
                        txtSolution.append("\nOr: R' F' R S' R' F2 R S R' F2' F R");
                        break;
                    case "V":
                        txtSolution.append("\nSecond Target: DR");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "W":
                        txtSolution.append("\nSecond Target: DB");
                        txtSolution.append("\nThis cycle is an F-Swap.");
                        txtSolution.append("\n\nSolution: [D' R' F : [R S' R', F2]]");
                        txtSolution.append("\nOr: D' R' F R S' R' F2 R S R' F2' F' R D");
                        break;
                    case "X":
                        txtSolution.append("\nSecond Target: DL");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U' : [S', R2']]");
                        txtSolution.append("\nOr: U' S' R2' S R2 U");
                        break;
                }

            case "W":
                txtSolution.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolution.setText("");
                txtSolution.append("First Target: DB");
                switch (target2) {
                    case "A":
                        txtSolution.append("\nSecond Target: UB");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U2, M]");
                        txtSolution.append("\nOr: U2 M U2' M'");
                        break;
                    case "B":
                        txtSolution.append("\nSecond Target: UR");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [R : [U' R' U, M2']]");
                        txtSolution.append("\nOr: R U' R' U M2' U' R U M2 R'");
                        break;
                    case "D":
                        txtSolution.append("\nSecond Target: UL");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [l' M' : [U L U', M2']]");
                        txtSolution.append("\nOr: l' M' U L U' M2' U L' U' M2 M l");
                        break;
                    case "E":
                        txtSolution.append("\nSecond Target: LU");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [l' : [U' L U, M2']]");
                        txtSolution.append("\nOr: l' U' L U M2' U' L' U M2 l");
                        break;
                    case "F":
                        txtSolution.append("\nSecond Target: LF");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M' : [U' L' U, M2']]");
                        txtSolution.append("\nOr: M' U' L' U M2' U' L U M2 M");
                        break;
                    case "G":
                        txtSolution.append("\nSecond Target: LD");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [U : [L B' L', S']]");
                        txtSolution.append("\nOr: U L B' L' S' L B L' S U'");
                        break;
                    case "H":
                        txtSolution.append("\nSecond Target: LB");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M' : [U' L U, M2]]");
                        txtSolution.append("\nOr: M' U' L U M2 U' L' U M2' M");
                        break;
                    case "J":
                        txtSolution.append("\nSecond Target: FR");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [U' R U, M2']");
                        txtSolution.append("\nOr: U' R U M2' U' R' U M2");
                        break;
                    case "K":
                        txtSolution.append("\nSecond Target: FD");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [D : [S', R F R']]");
                        txtSolution.append("\nOr: D S' R F R' S R F' R' D'");
                        break;
                    case "L":
                        txtSolution.append("\n\nLocation: FL");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [U L' U', M2']");
                        txtSolution.append("\nOr: U L' U' M2' U L U' M2");
                        break;
                    case "M":
                        txtSolution.append("\nSecond Target: RU");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [r : [U R' U', M2']]");
                        txtSolution.append("\nOr: r U' R' U' M2' U R U' M2 r'");
                        break;
                    case "N":
                        txtSolution.append("\nSecond Target: RB");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M' : [U R' U', M2']]");
                        txtSolution.append("\nOr: M' U R' U' M2' U R U' M2 M");
                        break;
                    case "O":
                        txtSolution.append("\nSecond Target: RD");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [U' : [R' B R, S]]");
                        txtSolution.append("\nOr: U' R' B R S R' B' R S' U");
                        break;
                    case "P":
                        txtSolution.append("\nSecond Target: RF: ");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [M' : [U R U', M2']]");
                        txtSolution.append("\nOr: M' U R U' M2' U R' U' M2 M");
                        break;
                    case "Q":
                        txtSolution.append("\nSecond Target: BU");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [U : [R B R', S]]");
                        txtSolution.append("\nOr: U R B R' S R B' R' S' U'");
                        break;
                    case "R":
                        txtSolution.append("\nSecond Target: BL");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [U L U', M2']");
                        txtSolution.append("\nOr: U L U' M2' U L' U' M2");
                        break;
                    case "S":
                        txtSolution.append("\nSecond Target: BD");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "T":
                        txtSolution.append("\nSecond Target: BR");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [U' R' U, M2']");
                        txtSolution.append("\nOr: U' R' U M2' U' R U M2");
                        break;
                    case "U":
                        txtSolution.append("\nSecond Target: DF");
                        txtSolution.append("\nThis cycle is an algorithm.");
                        txtSolution.append("\n\nSolution: M' U2 M' U2 M2'");
                        break;
                    case "V":
                        txtSolution.append("\nSecond Target: DR");
                        txtSolution.append("\nThis cycle is an F-Perm.");
                        txtSolution.append("\n\nSolution: [D' R' F' : [R S' R', F2]]");
                        txtSolution.append("\nOr: D' R' F' R S' R' F2 R S R' F2' F R D");
                        break;
                    case "W":
                        txtSolution.append("\nSecond Target: DB");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "X":
                        txtSolution.append("\nSecond Target: DL");
                        txtSolution.append("\nThis cycle is an F-Swap.");
                        txtSolution.append("\n\nSolution: [D L F : [L' S L, F2']]");
                        txtSolution.append("\nOr: D L F L' S L F2' L' S' L F2 F' L' D'");
                        break;
                }
                break;
            case "X":
                txtSolution.setFont(new Font("Courier", Font.BOLD, 30));
                txtSolution.setText("");
                txtSolution.append("First Target: DL");
                switch (target2) {
                    case "A":
                        txtSolution.append("\nSecond Target: UB");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U' : [S', L2]]");
                        txtSolution.append("\nOr: U' S' L2 S L2' U");
                        break;
                    case "B":
                        txtSolution.append("\nSecond Target: UR");
                        txtSolution.append("\nThis cycle is an algorithm.");
                        txtSolution.append("\n\nSolution: L U L' U' L' U' L' U L U");
                        break;
                    case "D":
                        txtSolution.append("\nSecond Target: UL: ");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [L' U' L : [S', L2]]");
                        txtSolution.append("\nOr: L' U' L S' L2 S L2' L' U L");
                        break;
                    case "E":
                        txtSolution.append("\nSecond Target: LU");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [S, L F' L']");
                        txtSolution.append("\nOr: S L F' L' S' L F L'");
                        break;
                    case "F":
                        txtSolution.append("\nSecond Target: LF");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U E L' : [E', L2]]");
                        txtSolution.append("\nOr: U E L' E' L2 E L2' L E' U'");
                        break;
                    case "G":
                        txtSolution.append("\nLocation: LD");
                        txtSolution.append("\n\nThis cycle cannot be done.");
                        break;
                    case "H":
                        txtSolution.append("\nSecond Target: LB: ");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [u L : [E, L2']]");
                        txtSolution.append("\nOr: u L E L2' E' L2 L' u'");
                        break;
                    case "J":
                        txtSolution.append("\nSecond Target: FR");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U L' : [E', L2]]");
                        txtSolution.append("\nOr: U L' E' L2 E L2' L U'");
                        break;
                    case "K":
                        txtSolution.append("\nSecond Target: FD");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U' L F L' : [S', L2]]");
                        txtSolution.append("\nOr: U' L F L' S' L2 S L2' L F' L' U");
                        break;
                    case "L":
                        txtSolution.append("\nSecond Target: FL");
                        txtSolution.append("\nThis cycle is an algorithm.");
                        txtSolution.append("\n\nSolution: U2' L' U L U L U L' U' L' U");
                        break;
                    case "M":
                        txtSolution.append("\nSecond Target: RU");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [R2' : [S', R F R']]");
                        txtSolution.append("\nOr: R2' S' R F R' S R F' R' R2");
                        break;
                    case "N":
                        txtSolution.append("\nSecond Target: RB");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [u L' : [E', L2]]");
                        txtSolution.append("\nOr: u L' E' L2 E L2' L u");
                        break;
                    case "O":
                        txtSolution.append("\nSecond Target: RD");
                        txtSolution.append("\nThis cycle is an S-Swap.");
                        txtSolution.append("\n\nSolution: [S', R F R']");
                        txtSolution.append("\nOr: S' R F R' S R F' R'");
                        break;
                    case "P":
                        txtSolution.append("\nSecond Target: RF");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U E L : [E, L2']]");
                        txtSolution.append("\nOr: U E L E L2' E' L2 L' E' U'");
                        break;
                    case "Q":
                        txtSolution.append("\nSecond Target: BU");
                        txtSolution.append("\nThis cycle is an M-Swap.");
                        txtSolution.append("\n\nSolution: [l : [U L U', M']]");
                        txtSolution.append("\nOr: l U L U' M' U L' U' M");
                        break;
                    case "R":
                        txtSolution.append("\nSecond Target: BL");
                        txtSolution.append("\nThis cycle is an algorithm");
                        txtSolution.append("\n\nSolution: L U' L' U' L' U' L U L U");
                        break;
                    case "S":
                        txtSolution.append("\nSecond Target: BD");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U' R' B R' : [S', R2]]");
                        txtSolution.append("\nOr: U' R' B R' S' R2 S R2' R B' R U");
                        break;
                    case "T":
                        txtSolution.append("\nSecond Target: BR");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: U L : [E, L2']");
                        txtSolution.append("\nOr: U L E L2' E' L2 L' U'");
                        break;
                    case "U":
                        txtSolution.append("\nSecond Target: DF");
                        txtSolution.append("\nThis cycle is an F-Swap.");
                        txtSolution.append("\n\nSolution: [L F : [L' S L, F2']]");
                        txtSolution.append("\nOr: L F L' S L F2' L' S' L F2 F' L");
                        break;
                    case "V":
                        txtSolution.append("\nSecond Target: DR");
                        txtSolution.append("\nThis cycle is a 4-Mover.");
                        txtSolution.append("\n\nSolution: [U' : [R2', S']]");
                        txtSolution.append("\nOr: U' R2' S' R2 S U");
                        break;
                    case "W":
                        txtSolution.append("\nLocation: DB");
                        txtSolution.append("\nThis cycle is an F-Swap.");
                        txtSolution.append("\n\nSolution: [D L F' : [L' S L, F2']]");
                        txtSolution.append("\nOr: D L F' L' S L F2' L' S' L F2 F L' D'");
                        break;
                    case "X":
                        txtSolution.append("\nLocation: DL");
                        txtSolution.append("\n\nThis cycle cannot be done");
                        break;
                }
                break;
        }
    }                                        

    private void txtTarget1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        txtTarget1.setFont(new Font("Courier", Font.PLAIN, 28));
    }                                          

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ThreeStyle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ThreeStyle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ThreeStyle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ThreeStyle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ThreeStyle().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnCycle;
    private javax.swing.JButton btnCycleC;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblJPerm;
    private javax.swing.JLabel lblSCR;
    private javax.swing.JLabel lblSpeffz;
    private javax.swing.JLabel lblTarget;
    private javax.swing.JLabel lblTarget2;
    private javax.swing.JLabel lblTargetC1;
    private javax.swing.JLabel lblTargetC2;
    private javax.swing.JPanel pnlCorners;
    private javax.swing.JPanel pnlEdges;
    private javax.swing.JScrollPane txtESolution;
    private javax.swing.JScrollPane txtESolution1;
    private javax.swing.JTextArea txtSolC;
    static javax.swing.JTextArea txtSolution;
    private javax.swing.JTextField txtTarget1;
    private javax.swing.JTextField txtTarget2;
    private javax.swing.JTextField txtTarget3;
    private javax.swing.JTextField txtTarget4;
    private javax.swing.JTextArea txtWelcome;
    // End of variables declaration                   
}
